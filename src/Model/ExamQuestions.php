<?php
/**
 * ExamQuestions
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Model;

use \ArrayAccess;
use \VATUSA\Client\ObjectSerializer;

/**
 * ExamQuestions Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExamQuestions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExamQuestions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'examId' => 'int',
        'question' => 'string',
        'type' => 'int',
        'answer' => 'string',
        'alt1' => 'string',
        'alt2' => 'string',
        'alt3' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'examId' => null,
        'question' => null,
        'type' => null,
        'answer' => null,
        'alt1' => null,
        'alt2' => null,
        'alt3' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'examId' => 'exam_id',
        'question' => 'question',
        'type' => 'type',
        'answer' => 'answer',
        'alt1' => 'alt1',
        'alt2' => 'alt2',
        'alt3' => 'alt3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'examId' => 'setExamId',
        'question' => 'setQuestion',
        'type' => 'setType',
        'answer' => 'setAnswer',
        'alt1' => 'setAlt1',
        'alt2' => 'setAlt2',
        'alt3' => 'setAlt3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'examId' => 'getExamId',
        'question' => 'getQuestion',
        'type' => 'getType',
        'answer' => 'getAnswer',
        'alt1' => 'getAlt1',
        'alt2' => 'getAlt2',
        'alt3' => 'getAlt3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['examId'] = isset($data['examId']) ? $data['examId'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['answer'] = isset($data['answer']) ? $data['answer'] : null;
        $this->container['alt1'] = isset($data['alt1']) ? $data['alt1'] : null;
        $this->container['alt2'] = isset($data['alt2']) ? $data['alt2'] : null;
        $this->container['alt3'] = isset($data['alt3']) ? $data['alt3'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Class ExamQuestions
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets examId
     *
     * @return int
     */
    public function getExamId()
    {
        return $this->container['examId'];
    }

    /**
     * Sets examId
     *
     * @param int $examId Class ExamQuestions
     *
     * @return $this
     */
    public function setExamId($examId)
    {
        $this->container['examId'] = $examId;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string $question Class ExamQuestions
     *
     * @return $this
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type 0-Multiple Choice, 1-True/False
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets answer
     *
     * @return string
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param string $answer Text of answer (True/False for T/F question type)
     *
     * @return $this
     */
    public function setAnswer($answer)
    {
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets alt1
     *
     * @return string
     */
    public function getAlt1()
    {
        return $this->container['alt1'];
    }

    /**
     * Sets alt1
     *
     * @param string $alt1 Only for Mult. Choice, distractor
     *
     * @return $this
     */
    public function setAlt1($alt1)
    {
        $this->container['alt1'] = $alt1;

        return $this;
    }

    /**
     * Gets alt2
     *
     * @return string
     */
    public function getAlt2()
    {
        return $this->container['alt2'];
    }

    /**
     * Sets alt2
     *
     * @param string $alt2 Only for Mult. Choice, distractor
     *
     * @return $this
     */
    public function setAlt2($alt2)
    {
        $this->container['alt2'] = $alt2;

        return $this;
    }

    /**
     * Gets alt3
     *
     * @return string
     */
    public function getAlt3()
    {
        return $this->container['alt3'];
    }

    /**
     * Sets alt3
     *
     * @param string $alt3 Only for Mult. Choice, distractor
     *
     * @return $this
     */
    public function setAlt3($alt3)
    {
        $this->container['alt3'] = $alt3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


