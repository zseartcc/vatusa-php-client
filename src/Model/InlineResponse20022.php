<?php
/**
 * InlineResponse20022
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Model;

use \ArrayAccess;
use \VATUSA\Client\ObjectSerializer;

/**
 * InlineResponse20022 Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20022 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_22';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'tmuFacility' => '\VATUSA\Client\Model\TmunoticesTmuFacility[]',
        'priority' => 'string',
        'message' => 'string',
        'expireDate' => 'string',
        'startDate' => 'string',
        'isDelay' => 'bool',
        'isPrefRoute' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'tmuFacility' => null,
        'priority' => null,
        'message' => null,
        'expireDate' => null,
        'startDate' => null,
        'isDelay' => null,
        'isPrefRoute' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'tmuFacility' => 'tmu_facility',
        'priority' => 'priority',
        'message' => 'message',
        'expireDate' => 'expire_date',
        'startDate' => 'start_date',
        'isDelay' => 'is_delay',
        'isPrefRoute' => 'is_pref_route'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'tmuFacility' => 'setTmuFacility',
        'priority' => 'setPriority',
        'message' => 'setMessage',
        'expireDate' => 'setExpireDate',
        'startDate' => 'setStartDate',
        'isDelay' => 'setIsDelay',
        'isPrefRoute' => 'setIsPrefRoute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'tmuFacility' => 'getTmuFacility',
        'priority' => 'getPriority',
        'message' => 'getMessage',
        'expireDate' => 'getExpireDate',
        'startDate' => 'getStartDate',
        'isDelay' => 'getIsDelay',
        'isPrefRoute' => 'getIsPrefRoute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['tmuFacility'] = isset($data['tmuFacility']) ? $data['tmuFacility'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['expireDate'] = isset($data['expireDate']) ? $data['expireDate'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['isDelay'] = isset($data['isDelay']) ? $data['isDelay'] : null;
        $this->container['isPrefRoute'] = isset($data['isPrefRoute']) ? $data['isPrefRoute'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id TMU Notice ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tmuFacility
     *
     * @return \VATUSA\Client\Model\TmunoticesTmuFacility[]
     */
    public function getTmuFacility()
    {
        return $this->container['tmuFacility'];
    }

    /**
     * Sets tmuFacility
     *
     * @param \VATUSA\Client\Model\TmunoticesTmuFacility[] $tmuFacility tmuFacility
     *
     * @return $this
     */
    public function setTmuFacility($tmuFacility)
    {
        $this->container['tmuFacility'] = $tmuFacility;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Priority of notice                                                                       (0:Low,1:Standard,2:Urgent)
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Notice content
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets expireDate
     *
     * @return string
     */
    public function getExpireDate()
    {
        return $this->container['expireDate'];
    }

    /**
     * Sets expireDate
     *
     * @param string $expireDate Expiration time in Zulu (YYYY-MM-DD H:i:s)
     *
     * @return $this
     */
    public function setExpireDate($expireDate)
    {
        $this->container['expireDate'] = $expireDate;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate Start time in Zulu (YYYY-MM-DD H:i:s)
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets isDelay
     *
     * @return bool
     */
    public function getIsDelay()
    {
        return $this->container['isDelay'];
    }

    /**
     * Sets isDelay
     *
     * @param bool $isDelay TMU Notice is a ground stop or delay.
     *
     * @return $this
     */
    public function setIsDelay($isDelay)
    {
        $this->container['isDelay'] = $isDelay;

        return $this;
    }

    /**
     * Gets isPrefRoute
     *
     * @return bool
     */
    public function getIsPrefRoute()
    {
        return $this->container['isPrefRoute'];
    }

    /**
     * Sets isPrefRoute
     *
     * @param bool $isPrefRoute TMU Notice is a preferred routing
     *
     * @return $this
     */
    public function setIsPrefRoute($isPrefRoute)
    {
        $this->container['isPrefRoute'] = $isPrefRoute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


