<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Model;

use \ArrayAccess;
use \VATUSA\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cid' => 'int',
        'fname' => 'string',
        'lname' => 'string',
        'email' => 'string',
        'facility' => 'string',
        'rating' => 'int',
        'ratingShort' => 'string',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'flagNeedbasic' => 'bool',
        'flagXferOverride' => 'bool',
        'flagBroadcastOptedIn' => 'bool',
        'flagPreventStaffAssign' => 'bool',
        'facilityJoin' => 'string',
        'promotionEligible' => 'bool',
        'transferEligible' => 'bool',
        'flagHomecontroller' => 'bool',
        'lastactivity' => 'string',
        'isMentor' => 'bool',
        'isSupIns' => 'bool',
        'roles' => '\VATUSA\Client\Model\UserRoles[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cid' => null,
        'fname' => null,
        'lname' => null,
        'email' => null,
        'facility' => null,
        'rating' => null,
        'ratingShort' => null,
        'createdAt' => null,
        'updatedAt' => null,
        'flagNeedbasic' => null,
        'flagXferOverride' => null,
        'flagBroadcastOptedIn' => null,
        'flagPreventStaffAssign' => null,
        'facilityJoin' => null,
        'promotionEligible' => null,
        'transferEligible' => null,
        'flagHomecontroller' => null,
        'lastactivity' => null,
        'isMentor' => null,
        'isSupIns' => null,
        'roles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cid' => 'cid',
        'fname' => 'fname',
        'lname' => 'lname',
        'email' => 'email',
        'facility' => 'facility',
        'rating' => 'rating',
        'ratingShort' => 'rating_short',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'flagNeedbasic' => 'flag_needbasic',
        'flagXferOverride' => 'flag_xferOverride',
        'flagBroadcastOptedIn' => 'flag_broadcastOptedIn',
        'flagPreventStaffAssign' => 'flag_preventStaffAssign',
        'facilityJoin' => 'facility_join',
        'promotionEligible' => 'promotion_eligible',
        'transferEligible' => 'transfer_eligible',
        'flagHomecontroller' => 'flag_homecontroller',
        'lastactivity' => 'lastactivity',
        'isMentor' => 'isMentor',
        'isSupIns' => 'isSupIns',
        'roles' => 'roles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cid' => 'setCid',
        'fname' => 'setFname',
        'lname' => 'setLname',
        'email' => 'setEmail',
        'facility' => 'setFacility',
        'rating' => 'setRating',
        'ratingShort' => 'setRatingShort',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'flagNeedbasic' => 'setFlagNeedbasic',
        'flagXferOverride' => 'setFlagXferOverride',
        'flagBroadcastOptedIn' => 'setFlagBroadcastOptedIn',
        'flagPreventStaffAssign' => 'setFlagPreventStaffAssign',
        'facilityJoin' => 'setFacilityJoin',
        'promotionEligible' => 'setPromotionEligible',
        'transferEligible' => 'setTransferEligible',
        'flagHomecontroller' => 'setFlagHomecontroller',
        'lastactivity' => 'setLastactivity',
        'isMentor' => 'setIsMentor',
        'isSupIns' => 'setIsSupIns',
        'roles' => 'setRoles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cid' => 'getCid',
        'fname' => 'getFname',
        'lname' => 'getLname',
        'email' => 'getEmail',
        'facility' => 'getFacility',
        'rating' => 'getRating',
        'ratingShort' => 'getRatingShort',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'flagNeedbasic' => 'getFlagNeedbasic',
        'flagXferOverride' => 'getFlagXferOverride',
        'flagBroadcastOptedIn' => 'getFlagBroadcastOptedIn',
        'flagPreventStaffAssign' => 'getFlagPreventStaffAssign',
        'facilityJoin' => 'getFacilityJoin',
        'promotionEligible' => 'getPromotionEligible',
        'transferEligible' => 'getTransferEligible',
        'flagHomecontroller' => 'getFlagHomecontroller',
        'lastactivity' => 'getLastactivity',
        'isMentor' => 'getIsMentor',
        'isSupIns' => 'getIsSupIns',
        'roles' => 'getRoles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['fname'] = isset($data['fname']) ? $data['fname'] : null;
        $this->container['lname'] = isset($data['lname']) ? $data['lname'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['facility'] = isset($data['facility']) ? $data['facility'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['ratingShort'] = isset($data['ratingShort']) ? $data['ratingShort'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['flagNeedbasic'] = isset($data['flagNeedbasic']) ? $data['flagNeedbasic'] : null;
        $this->container['flagXferOverride'] = isset($data['flagXferOverride']) ? $data['flagXferOverride'] : null;
        $this->container['flagBroadcastOptedIn'] = isset($data['flagBroadcastOptedIn']) ? $data['flagBroadcastOptedIn'] : null;
        $this->container['flagPreventStaffAssign'] = isset($data['flagPreventStaffAssign']) ? $data['flagPreventStaffAssign'] : null;
        $this->container['facilityJoin'] = isset($data['facilityJoin']) ? $data['facilityJoin'] : null;
        $this->container['promotionEligible'] = isset($data['promotionEligible']) ? $data['promotionEligible'] : null;
        $this->container['transferEligible'] = isset($data['transferEligible']) ? $data['transferEligible'] : null;
        $this->container['flagHomecontroller'] = isset($data['flagHomecontroller']) ? $data['flagHomecontroller'] : null;
        $this->container['lastactivity'] = isset($data['lastactivity']) ? $data['lastactivity'] : null;
        $this->container['isMentor'] = isset($data['isMentor']) ? $data['isMentor'] : null;
        $this->container['isSupIns'] = isset($data['isSupIns']) ? $data['isSupIns'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cid
     *
     * @return int
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param int $cid Class User
     *
     * @return $this
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets fname
     *
     * @return string
     */
    public function getFname()
    {
        return $this->container['fname'];
    }

    /**
     * Sets fname
     *
     * @param string $fname First name
     *
     * @return $this
     */
    public function setFname($fname)
    {
        $this->container['fname'] = $fname;

        return $this;
    }

    /**
     * Gets lname
     *
     * @return string
     */
    public function getLname()
    {
        return $this->container['lname'];
    }

    /**
     * Sets lname
     *
     * @param string $lname Last name
     *
     * @return $this
     */
    public function setLname($lname)
    {
        $this->container['lname'] = $lname;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address of user, will be null if API Key or  *                                     necessary roles are not available (ATM, DATM, TA, WM, INS)
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets facility
     *
     * @return string
     */
    public function getFacility()
    {
        return $this->container['facility'];
    }

    /**
     * Sets facility
     *
     * @param string $facility Facility ID
     *
     * @return $this
     */
    public function setFacility($facility)
    {
        $this->container['facility'] = $facility;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param int $rating Rating based off array where 1=OBS, S1, S2, S3,  *                                      C1, C2, C3, I1, I2, I3, SUP, ADM
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets ratingShort
     *
     * @return string
     */
    public function getRatingShort()
    {
        return $this->container['ratingShort'];
    }

    /**
     * Sets ratingShort
     *
     * @param string $ratingShort String representation of rating
     *
     * @return $this
     */
    public function setRatingShort($ratingShort)
    {
        $this->container['ratingShort'] = $ratingShort;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt Date added to database
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt Class User
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets flagNeedbasic
     *
     * @return bool
     */
    public function getFlagNeedbasic()
    {
        return $this->container['flagNeedbasic'];
    }

    /**
     * Sets flagNeedbasic
     *
     * @param bool $flagNeedbasic 1 needs basic exam
     *
     * @return $this
     */
    public function setFlagNeedbasic($flagNeedbasic)
    {
        $this->container['flagNeedbasic'] = $flagNeedbasic;

        return $this;
    }

    /**
     * Gets flagXferOverride
     *
     * @return bool
     */
    public function getFlagXferOverride()
    {
        return $this->container['flagXferOverride'];
    }

    /**
     * Sets flagXferOverride
     *
     * @param bool $flagXferOverride Has approved transfer override
     *
     * @return $this
     */
    public function setFlagXferOverride($flagXferOverride)
    {
        $this->container['flagXferOverride'] = $flagXferOverride;

        return $this;
    }

    /**
     * Gets flagBroadcastOptedIn
     *
     * @return bool
     */
    public function getFlagBroadcastOptedIn()
    {
        return $this->container['flagBroadcastOptedIn'];
    }

    /**
     * Sets flagBroadcastOptedIn
     *
     * @param bool $flagBroadcastOptedIn Has opted in to receiving broadcast  *                                                     emails
     *
     * @return $this
     */
    public function setFlagBroadcastOptedIn($flagBroadcastOptedIn)
    {
        $this->container['flagBroadcastOptedIn'] = $flagBroadcastOptedIn;

        return $this;
    }

    /**
     * Gets flagPreventStaffAssign
     *
     * @return bool
     */
    public function getFlagPreventStaffAssign()
    {
        return $this->container['flagPreventStaffAssign'];
    }

    /**
     * Sets flagPreventStaffAssign
     *
     * @param bool $flagPreventStaffAssign Ineligible for staff role  *                                                       assignment
     *
     * @return $this
     */
    public function setFlagPreventStaffAssign($flagPreventStaffAssign)
    {
        $this->container['flagPreventStaffAssign'] = $flagPreventStaffAssign;

        return $this;
    }

    /**
     * Gets facilityJoin
     *
     * @return string
     */
    public function getFacilityJoin()
    {
        return $this->container['facilityJoin'];
    }

    /**
     * Sets facilityJoin
     *
     * @param string $facilityJoin Date joined facility (YYYY-mm-dd  *                                             hh:mm:ss)
     *
     * @return $this
     */
    public function setFacilityJoin($facilityJoin)
    {
        $this->container['facilityJoin'] = $facilityJoin;

        return $this;
    }

    /**
     * Gets promotionEligible
     *
     * @return bool
     */
    public function getPromotionEligible()
    {
        return $this->container['promotionEligible'];
    }

    /**
     * Sets promotionEligible
     *
     * @param bool $promotionEligible Is member eligible for promotion?
     *
     * @return $this
     */
    public function setPromotionEligible($promotionEligible)
    {
        $this->container['promotionEligible'] = $promotionEligible;

        return $this;
    }

    /**
     * Gets transferEligible
     *
     * @return bool
     */
    public function getTransferEligible()
    {
        return $this->container['transferEligible'];
    }

    /**
     * Sets transferEligible
     *
     * @param bool $transferEligible Is member is eligible for transfer?
     *
     * @return $this
     */
    public function setTransferEligible($transferEligible)
    {
        $this->container['transferEligible'] = $transferEligible;

        return $this;
    }

    /**
     * Gets flagHomecontroller
     *
     * @return bool
     */
    public function getFlagHomecontroller()
    {
        return $this->container['flagHomecontroller'];
    }

    /**
     * Sets flagHomecontroller
     *
     * @param bool $flagHomecontroller 1-Belongs to VATUSA
     *
     * @return $this
     */
    public function setFlagHomecontroller($flagHomecontroller)
    {
        $this->container['flagHomecontroller'] = $flagHomecontroller;

        return $this;
    }

    /**
     * Gets lastactivity
     *
     * @return string
     */
    public function getLastactivity()
    {
        return $this->container['lastactivity'];
    }

    /**
     * Sets lastactivity
     *
     * @param string $lastactivity Date last seen on website
     *
     * @return $this
     */
    public function setLastactivity($lastactivity)
    {
        $this->container['lastactivity'] = $lastactivity;

        return $this;
    }

    /**
     * Gets isMentor
     *
     * @return bool
     */
    public function getIsMentor()
    {
        return $this->container['isMentor'];
    }

    /**
     * Sets isMentor
     *
     * @param bool $isMentor Has Mentor role
     *
     * @return $this
     */
    public function setIsMentor($isMentor)
    {
        $this->container['isMentor'] = $isMentor;

        return $this;
    }

    /**
     * Gets isSupIns
     *
     * @return bool
     */
    public function getIsSupIns()
    {
        return $this->container['isSupIns'];
    }

    /**
     * Sets isSupIns
     *
     * @param bool $isSupIns Is a SUP and has INS role
     *
     * @return $this
     */
    public function setIsSupIns($isSupIns)
    {
        $this->container['isSupIns'] = $isSupIns;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \VATUSA\Client\Model\UserRoles[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \VATUSA\Client\Model\UserRoles[] $roles Class User
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


