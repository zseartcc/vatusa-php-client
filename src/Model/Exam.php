<?php
/**
 * Exam
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Model;

use \ArrayAccess;
use \VATUSA\Client\ObjectSerializer;

/**
 * Exam Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Exam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Exam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'facilityId' => 'string',
        'name' => 'string',
        'number' => 'int',
        'isActive' => 'int',
        'cbtRequired' => 'string',
        'retakePeriod' => 'int',
        'passingScore' => 'int',
        'answerVisibility' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'facilityId' => null,
        'name' => null,
        'number' => null,
        'isActive' => null,
        'cbtRequired' => null,
        'retakePeriod' => null,
        'passingScore' => null,
        'answerVisibility' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'facilityId' => 'facility_id',
        'name' => 'name',
        'number' => 'number',
        'isActive' => 'is_active',
        'cbtRequired' => 'cbt_required',
        'retakePeriod' => 'retake_period',
        'passingScore' => 'passing_score',
        'answerVisibility' => 'answer_visibility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'facilityId' => 'setFacilityId',
        'name' => 'setName',
        'number' => 'setNumber',
        'isActive' => 'setIsActive',
        'cbtRequired' => 'setCbtRequired',
        'retakePeriod' => 'setRetakePeriod',
        'passingScore' => 'setPassingScore',
        'answerVisibility' => 'setAnswerVisibility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'facilityId' => 'getFacilityId',
        'name' => 'getName',
        'number' => 'getNumber',
        'isActive' => 'getIsActive',
        'cbtRequired' => 'getCbtRequired',
        'retakePeriod' => 'getRetakePeriod',
        'passingScore' => 'getPassingScore',
        'answerVisibility' => 'getAnswerVisibility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['facilityId'] = isset($data['facilityId']) ? $data['facilityId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['cbtRequired'] = isset($data['cbtRequired']) ? $data['cbtRequired'] : null;
        $this->container['retakePeriod'] = isset($data['retakePeriod']) ? $data['retakePeriod'] : null;
        $this->container['passingScore'] = isset($data['passingScore']) ? $data['passingScore'] : null;
        $this->container['answerVisibility'] = isset($data['answerVisibility']) ? $data['answerVisibility'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Class Exam
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets facilityId
     *
     * @return string
     */
    public function getFacilityId()
    {
        return $this->container['facilityId'];
    }

    /**
     * Sets facilityId
     *
     * @param string $facilityId Class Exam
     *
     * @return $this
     */
    public function setFacilityId($facilityId)
    {
        $this->container['facilityId'] = $facilityId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Class Exam
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Number to ask, 0 = all
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return int
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param int $isActive integer representation of boolean (1=true,0=false)
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets cbtRequired
     *
     * @return string
     */
    public function getCbtRequired()
    {
        return $this->container['cbtRequired'];
    }

    /**
     * Sets cbtRequired
     *
     * @param string $cbtRequired null = none, otherwise block id
     *
     * @return $this
     */
    public function setCbtRequired($cbtRequired)
    {
        $this->container['cbtRequired'] = $cbtRequired;

        return $this;
    }

    /**
     * Gets retakePeriod
     *
     * @return int
     */
    public function getRetakePeriod()
    {
        return $this->container['retakePeriod'];
    }

    /**
     * Sets retakePeriod
     *
     * @param int $retakePeriod Number of days until automatic reassign (0=no auto-reassign)
     *
     * @return $this
     */
    public function setRetakePeriod($retakePeriod)
    {
        $this->container['retakePeriod'] = $retakePeriod;

        return $this;
    }

    /**
     * Gets passingScore
     *
     * @return int
     */
    public function getPassingScore()
    {
        return $this->container['passingScore'];
    }

    /**
     * Sets passingScore
     *
     * @param int $passingScore Percentage to pass times 100 (70%= .7 * 100=70)
     *
     * @return $this
     */
    public function setPassingScore($passingScore)
    {
        $this->container['passingScore'] = $passingScore;

        return $this;
    }

    /**
     * Gets answerVisibility
     *
     * @return string
     */
    public function getAnswerVisibility()
    {
        return $this->container['answerVisibility'];
    }

    /**
     * Sets answerVisibility
     *
     * @param string $answerVisibility Answer visibility, all = user and correct, all_passed = all when passed otherwise just user answers, user_only = only user selected options
     *
     * @return $this
     */
    public function setAnswerVisibility($answerVisibility)
    {
        $this->container['answerVisibility'] = $answerVisibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


