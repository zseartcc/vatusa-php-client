<?php
/**
 * TrainingRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Model;

use \ArrayAccess;
use \VATUSA\Client\ObjectSerializer;

/**
 * TrainingRecord Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrainingRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrainingRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'studentId' => 'int',
        'instructorId' => 'int',
        'sessionDate' => 'string',
        'facilityId' => 'string',
        'position' => 'string',
        'duration' => 'string',
        'movements' => 'int',
        'score' => 'int',
        'notes' => 'string',
        'location' => 'int',
        'otsStatus' => 'bool',
        'isCbt' => 'bool',
        'soloGranted' => 'bool',
        'modifiedBy' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'studentId' => null,
        'instructorId' => null,
        'sessionDate' => null,
        'facilityId' => null,
        'position' => null,
        'duration' => null,
        'movements' => null,
        'score' => null,
        'notes' => null,
        'location' => null,
        'otsStatus' => null,
        'isCbt' => null,
        'soloGranted' => null,
        'modifiedBy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'studentId' => 'student_id',
        'instructorId' => 'instructor_id',
        'sessionDate' => 'session_date',
        'facilityId' => 'facility_id',
        'position' => 'position',
        'duration' => 'duration',
        'movements' => 'movements',
        'score' => 'score',
        'notes' => 'notes',
        'location' => 'location',
        'otsStatus' => 'ots_status',
        'isCbt' => 'is_cbt',
        'soloGranted' => 'solo_granted',
        'modifiedBy' => 'modified_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'studentId' => 'setStudentId',
        'instructorId' => 'setInstructorId',
        'sessionDate' => 'setSessionDate',
        'facilityId' => 'setFacilityId',
        'position' => 'setPosition',
        'duration' => 'setDuration',
        'movements' => 'setMovements',
        'score' => 'setScore',
        'notes' => 'setNotes',
        'location' => 'setLocation',
        'otsStatus' => 'setOtsStatus',
        'isCbt' => 'setIsCbt',
        'soloGranted' => 'setSoloGranted',
        'modifiedBy' => 'setModifiedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'studentId' => 'getStudentId',
        'instructorId' => 'getInstructorId',
        'sessionDate' => 'getSessionDate',
        'facilityId' => 'getFacilityId',
        'position' => 'getPosition',
        'duration' => 'getDuration',
        'movements' => 'getMovements',
        'score' => 'getScore',
        'notes' => 'getNotes',
        'location' => 'getLocation',
        'otsStatus' => 'getOtsStatus',
        'isCbt' => 'getIsCbt',
        'soloGranted' => 'getSoloGranted',
        'modifiedBy' => 'getModifiedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['studentId'] = isset($data['studentId']) ? $data['studentId'] : null;
        $this->container['instructorId'] = isset($data['instructorId']) ? $data['instructorId'] : null;
        $this->container['sessionDate'] = isset($data['sessionDate']) ? $data['sessionDate'] : null;
        $this->container['facilityId'] = isset($data['facilityId']) ? $data['facilityId'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['movements'] = isset($data['movements']) ? $data['movements'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['otsStatus'] = isset($data['otsStatus']) ? $data['otsStatus'] : null;
        $this->container['isCbt'] = isset($data['isCbt']) ? $data['isCbt'] : null;
        $this->container['soloGranted'] = isset($data['soloGranted']) ? $data['soloGranted'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['studentId'] === null) {
            $invalidProperties[] = "'studentId' can't be null";
        }
        if ($this->container['instructorId'] === null) {
            $invalidProperties[] = "'instructorId' can't be null";
        }
        if ($this->container['sessionDate'] === null) {
            $invalidProperties[] = "'sessionDate' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Record ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets studentId
     *
     * @return int
     */
    public function getStudentId()
    {
        return $this->container['studentId'];
    }

    /**
     * Sets studentId
     *
     * @param int $studentId Student CID
     *
     * @return $this
     */
    public function setStudentId($studentId)
    {
        $this->container['studentId'] = $studentId;

        return $this;
    }

    /**
     * Gets instructorId
     *
     * @return int
     */
    public function getInstructorId()
    {
        return $this->container['instructorId'];
    }

    /**
     * Sets instructorId
     *
     * @param int $instructorId Instructor CID
     *
     * @return $this
     */
    public function setInstructorId($instructorId)
    {
        $this->container['instructorId'] = $instructorId;

        return $this;
    }

    /**
     * Gets sessionDate
     *
     * @return string
     */
    public function getSessionDate()
    {
        return $this->container['sessionDate'];
    }

    /**
     * Sets sessionDate
     *
     * @param string $sessionDate Date and time of session
     *
     * @return $this
     */
    public function setSessionDate($sessionDate)
    {
        $this->container['sessionDate'] = $sessionDate;

        return $this;
    }

    /**
     * Gets facilityId
     *
     * @return string
     */
    public function getFacilityId()
    {
        return $this->container['facilityId'];
    }

    /**
     * Sets facilityId
     *
     * @param string $facilityId Facility ID (ex. ZSE)
     *
     * @return $this
     */
    public function setFacilityId($facilityId)
    {
        $this->container['facilityId'] = $facilityId;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position Position worked/trained on (ex. SEA_APP)
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration Duration of session, HH:MM
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets movements
     *
     * @return int
     */
    public function getMovements()
    {
        return $this->container['movements'];
    }

    /**
     * Sets movements
     *
     * @param int $movements Number of aircraft seen
     *
     * @return $this
     */
    public function setMovements($movements)
    {
        $this->container['movements'] = $movements;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score Overall score/rating out of 5
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Training notes content
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets location
     *
     * @return int
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param int $location 0 = Classroom; 1 = Live; 2 = Sweatbox
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets otsStatus
     *
     * @return bool
     */
    public function getOtsStatus()
    {
        return $this->container['otsStatus'];
    }

    /**
     * Sets otsStatus
     *
     * @param bool $otsStatus OTS Status: 0 = Not OTS, 1 = OTS Pass, 2 = OTS Fail, 3 = OTS Recommended
     *
     * @return $this
     */
    public function setOtsStatus($otsStatus)
    {
        $this->container['otsStatus'] = $otsStatus;

        return $this;
    }

    /**
     * Gets isCbt
     *
     * @return bool
     */
    public function getIsCbt()
    {
        return $this->container['isCbt'];
    }

    /**
     * Sets isCbt
     *
     * @param bool $isCbt System - CBT Completion
     *
     * @return $this
     */
    public function setIsCbt($isCbt)
    {
        $this->container['isCbt'] = $isCbt;

        return $this;
    }

    /**
     * Gets soloGranted
     *
     * @return bool
     */
    public function getSoloGranted()
    {
        return $this->container['soloGranted'];
    }

    /**
     * Sets soloGranted
     *
     * @param bool $soloGranted Solo was granted during the session
     *
     * @return $this
     */
    public function setSoloGranted($soloGranted)
    {
        $this->container['soloGranted'] = $soloGranted;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return bool
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param bool $modifiedBy Editor CID
     *
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


