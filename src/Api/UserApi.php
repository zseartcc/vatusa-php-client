<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation examIdAssignCidDelete
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examIdAssignCidDelete($id, $cid)
    {
        list($response) = $this->examIdAssignCidDeleteWithHttpInfo($id, $cid);
        return $response;
    }

    /**
     * Operation examIdAssignCidDeleteWithHttpInfo
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examIdAssignCidDeleteWithHttpInfo($id, $cid)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidDeleteRequest($id, $cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examIdAssignCidDeleteAsync
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidDeleteAsync($id, $cid)
    {
        return $this->examIdAssignCidDeleteAsyncWithHttpInfo($id, $cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examIdAssignCidDeleteAsyncWithHttpInfo
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidDeleteAsyncWithHttpInfo($id, $cid)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidDeleteRequest($id, $cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examIdAssignCidDelete'
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examIdAssignCidDeleteRequest($id, $cid)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling examIdAssignCidDelete'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling examIdAssignCidDelete'
            );
        }

        $resourcePath = '/exam/{id}/assign/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examIdAssignCidPost
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examIdAssignCidPost($id, $cid, $expire = null)
    {
        list($response) = $this->examIdAssignCidPostWithHttpInfo($id, $cid, $expire);
        return $response;
    }

    /**
     * Operation examIdAssignCidPostWithHttpInfo
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examIdAssignCidPostWithHttpInfo($id, $cid, $expire = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidPostRequest($id, $cid, $expire);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examIdAssignCidPostAsync
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidPostAsync($id, $cid, $expire = null)
    {
        return $this->examIdAssignCidPostAsyncWithHttpInfo($id, $cid, $expire)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examIdAssignCidPostAsyncWithHttpInfo
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidPostAsyncWithHttpInfo($id, $cid, $expire = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidPostRequest($id, $cid, $expire);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examIdAssignCidPost'
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examIdAssignCidPostRequest($id, $cid, $expire = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling examIdAssignCidPost'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling examIdAssignCidPost'
            );
        }

        $resourcePath = '/exam/{id}/assign/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // form params
        if ($expire !== null) {
            $formParams['expire'] = ObjectSerializer::toFormValue($expire);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidCbtHistoryGet
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\TrainingProgress[]
     */
    public function userCidCbtHistoryGet($cid)
    {
        list($response) = $this->userCidCbtHistoryGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidCbtHistoryGetWithHttpInfo
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\TrainingProgress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidCbtHistoryGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\TrainingProgress[]';
        $request = $this->userCidCbtHistoryGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\TrainingProgress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidCbtHistoryGetAsync
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtHistoryGetAsync($cid)
    {
        return $this->userCidCbtHistoryGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidCbtHistoryGetAsyncWithHttpInfo
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtHistoryGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\TrainingProgress[]';
        $request = $this->userCidCbtHistoryGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidCbtHistoryGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidCbtHistoryGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidCbtHistoryGet'
            );
        }

        $resourcePath = '/user/{cid}/cbt/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPut
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidCbtProgressBlockIdChapterIdPut($cid, $blockId, $chapterId)
    {
        list($response) = $this->userCidCbtProgressBlockIdChapterIdPutWithHttpInfo($cid, $blockId, $chapterId);
        return $response;
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPutWithHttpInfo
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidCbtProgressBlockIdChapterIdPutWithHttpInfo($cid, $blockId, $chapterId)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidCbtProgressBlockIdChapterIdPutRequest($cid, $blockId, $chapterId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPutAsync
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdChapterIdPutAsync($cid, $blockId, $chapterId)
    {
        return $this->userCidCbtProgressBlockIdChapterIdPutAsyncWithHttpInfo($cid, $blockId, $chapterId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPutAsyncWithHttpInfo
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdChapterIdPutAsyncWithHttpInfo($cid, $blockId, $chapterId)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidCbtProgressBlockIdChapterIdPutRequest($cid, $blockId, $chapterId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidCbtProgressBlockIdChapterIdPut'
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidCbtProgressBlockIdChapterIdPutRequest($cid, $blockId, $chapterId)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidCbtProgressBlockIdChapterIdPut'
            );
        }
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling userCidCbtProgressBlockIdChapterIdPut'
            );
        }
        // verify the required parameter 'chapterId' is set
        if ($chapterId === null || (is_array($chapterId) && count($chapterId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chapterId when calling userCidCbtProgressBlockIdChapterIdPut'
            );
        }

        $resourcePath = '/user/{cid}/cbt/progress/{blockId}/{chapterId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }
        // path params
        if ($chapterId !== null) {
            $resourcePath = str_replace(
                '{' . 'chapterId' . '}',
                ObjectSerializer::toPathValue($chapterId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidCbtProgressBlockIdGet
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20025[]
     */
    public function userCidCbtProgressBlockIdGet($cid, $blockId)
    {
        list($response) = $this->userCidCbtProgressBlockIdGetWithHttpInfo($cid, $blockId);
        return $response;
    }

    /**
     * Operation userCidCbtProgressBlockIdGetWithHttpInfo
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20025[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidCbtProgressBlockIdGetWithHttpInfo($cid, $blockId)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20025[]';
        $request = $this->userCidCbtProgressBlockIdGetRequest($cid, $blockId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20025[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidCbtProgressBlockIdGetAsync
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdGetAsync($cid, $blockId)
    {
        return $this->userCidCbtProgressBlockIdGetAsyncWithHttpInfo($cid, $blockId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidCbtProgressBlockIdGetAsyncWithHttpInfo
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdGetAsyncWithHttpInfo($cid, $blockId)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20025[]';
        $request = $this->userCidCbtProgressBlockIdGetRequest($cid, $blockId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidCbtProgressBlockIdGet'
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidCbtProgressBlockIdGetRequest($cid, $blockId)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidCbtProgressBlockIdGet'
            );
        }
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling userCidCbtProgressBlockIdGet'
            );
        }

        $resourcePath = '/user/{cid}/cbt/progress/{blockId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidExamHistoryGet
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\ExamResults[]
     */
    public function userCidExamHistoryGet($cid)
    {
        list($response) = $this->userCidExamHistoryGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidExamHistoryGetWithHttpInfo
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\ExamResults[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidExamHistoryGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\ExamResults[]';
        $request = $this->userCidExamHistoryGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\ExamResults[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidExamHistoryGetAsync
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidExamHistoryGetAsync($cid)
    {
        return $this->userCidExamHistoryGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidExamHistoryGetAsyncWithHttpInfo
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidExamHistoryGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\ExamResults[]';
        $request = $this->userCidExamHistoryGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidExamHistoryGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidExamHistoryGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidExamHistoryGet'
            );
        }

        $resourcePath = '/user/{cid}/exam/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidGet
     *
     * Get user's information.
     *
     * @param  string $cid Cert ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\User
     */
    public function userCidGet($cid)
    {
        list($response) = $this->userCidGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidGetWithHttpInfo
     *
     * Get user's information.
     *
     * @param  string $cid Cert ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\User';
        $request = $this->userCidGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidGetAsync
     *
     * Get user's information.
     *
     * @param  string $cid Cert ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidGetAsync($cid)
    {
        return $this->userCidGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidGetAsyncWithHttpInfo
     *
     * Get user's information.
     *
     * @param  string $cid Cert ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\User';
        $request = $this->userCidGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidGet'
     *
     * @param  string $cid Cert ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidGet'
            );
        }

        $resourcePath = '/user/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidLogGet
     *
     * Get controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Action[]
     */
    public function userCidLogGet($cid, $entry)
    {
        list($response) = $this->userCidLogGetWithHttpInfo($cid, $entry);
        return $response;
    }

    /**
     * Operation userCidLogGetWithHttpInfo
     *
     * Get controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Action[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidLogGetWithHttpInfo($cid, $entry)
    {
        $returnType = '\VATUSA\Client\Model\Action[]';
        $request = $this->userCidLogGetRequest($cid, $entry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Action[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidLogGetAsync
     *
     * Get controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidLogGetAsync($cid, $entry)
    {
        return $this->userCidLogGetAsyncWithHttpInfo($cid, $entry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidLogGetAsyncWithHttpInfo
     *
     * Get controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidLogGetAsyncWithHttpInfo($cid, $entry)
    {
        $returnType = '\VATUSA\Client\Model\Action[]';
        $request = $this->userCidLogGetRequest($cid, $entry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidLogGet'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidLogGetRequest($cid, $entry)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidLogGet'
            );
        }
        // verify the required parameter 'entry' is set
        if ($entry === null || (is_array($entry) && count($entry) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entry when calling userCidLogGet'
            );
        }

        $resourcePath = '/user/{cid}/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // form params
        if ($entry !== null) {
            $formParams['entry'] = ObjectSerializer::toFormValue($entry);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidLogPost
     *
     * Submit entry to controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidLogPost($cid, $entry)
    {
        list($response) = $this->userCidLogPostWithHttpInfo($cid, $entry);
        return $response;
    }

    /**
     * Operation userCidLogPostWithHttpInfo
     *
     * Submit entry to controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidLogPostWithHttpInfo($cid, $entry)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidLogPostRequest($cid, $entry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidLogPostAsync
     *
     * Submit entry to controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidLogPostAsync($cid, $entry)
    {
        return $this->userCidLogPostAsyncWithHttpInfo($cid, $entry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidLogPostAsyncWithHttpInfo
     *
     * Submit entry to controller's action log. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidLogPostAsyncWithHttpInfo($cid, $entry)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidLogPostRequest($cid, $entry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidLogPost'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $entry Entry to log (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidLogPostRequest($cid, $entry)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidLogPost'
            );
        }
        // verify the required parameter 'entry' is set
        if ($entry === null || (is_array($entry) && count($entry) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entry when calling userCidLogPost'
            );
        }

        $resourcePath = '/user/{cid}/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // form params
        if ($entry !== null) {
            $formParams['entry'] = ObjectSerializer::toFormValue($entry);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidRatingHistoryGet
     *
     * Get user's rating history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Promotion[]
     */
    public function userCidRatingHistoryGet($cid)
    {
        list($response) = $this->userCidRatingHistoryGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidRatingHistoryGetWithHttpInfo
     *
     * Get user's rating history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Promotion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidRatingHistoryGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\Promotion[]';
        $request = $this->userCidRatingHistoryGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Promotion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidRatingHistoryGetAsync
     *
     * Get user's rating history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRatingHistoryGetAsync($cid)
    {
        return $this->userCidRatingHistoryGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidRatingHistoryGetAsyncWithHttpInfo
     *
     * Get user's rating history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRatingHistoryGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\Promotion[]';
        $request = $this->userCidRatingHistoryGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidRatingHistoryGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidRatingHistoryGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidRatingHistoryGet'
            );
        }

        $resourcePath = '/user/{cid}/rating/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidRatingPost
     *
     * Submit rating change. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $rating Rating to change     rating to (required)
     * @param  string $examDate Date of exam (format, YYYY-MM-DD)     required for C1 and below (optional)
     * @param  int $examiner CID of Examiner, if not provided     or null will default to authenticated user, required for C1 and below (optional)
     * @param  string $position Position sat during exam,     required for C1 and below (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidRatingPost($cid, $rating, $examDate = null, $examiner = null, $position = null)
    {
        list($response) = $this->userCidRatingPostWithHttpInfo($cid, $rating, $examDate, $examiner, $position);
        return $response;
    }

    /**
     * Operation userCidRatingPostWithHttpInfo
     *
     * Submit rating change. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $rating Rating to change     rating to (required)
     * @param  string $examDate Date of exam (format, YYYY-MM-DD)     required for C1 and below (optional)
     * @param  int $examiner CID of Examiner, if not provided     or null will default to authenticated user, required for C1 and below (optional)
     * @param  string $position Position sat during exam,     required for C1 and below (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidRatingPostWithHttpInfo($cid, $rating, $examDate = null, $examiner = null, $position = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRatingPostRequest($cid, $rating, $examDate, $examiner, $position);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidRatingPostAsync
     *
     * Submit rating change. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $rating Rating to change     rating to (required)
     * @param  string $examDate Date of exam (format, YYYY-MM-DD)     required for C1 and below (optional)
     * @param  int $examiner CID of Examiner, if not provided     or null will default to authenticated user, required for C1 and below (optional)
     * @param  string $position Position sat during exam,     required for C1 and below (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRatingPostAsync($cid, $rating, $examDate = null, $examiner = null, $position = null)
    {
        return $this->userCidRatingPostAsyncWithHttpInfo($cid, $rating, $examDate, $examiner, $position)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidRatingPostAsyncWithHttpInfo
     *
     * Submit rating change. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $rating Rating to change     rating to (required)
     * @param  string $examDate Date of exam (format, YYYY-MM-DD)     required for C1 and below (optional)
     * @param  int $examiner CID of Examiner, if not provided     or null will default to authenticated user, required for C1 and below (optional)
     * @param  string $position Position sat during exam,     required for C1 and below (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRatingPostAsyncWithHttpInfo($cid, $rating, $examDate = null, $examiner = null, $position = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRatingPostRequest($cid, $rating, $examDate, $examiner, $position);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidRatingPost'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $rating Rating to change     rating to (required)
     * @param  string $examDate Date of exam (format, YYYY-MM-DD)     required for C1 and below (optional)
     * @param  int $examiner CID of Examiner, if not provided     or null will default to authenticated user, required for C1 and below (optional)
     * @param  string $position Position sat during exam,     required for C1 and below (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidRatingPostRequest($cid, $rating, $examDate = null, $examiner = null, $position = null)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidRatingPost'
            );
        }
        // verify the required parameter 'rating' is set
        if ($rating === null || (is_array($rating) && count($rating) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating when calling userCidRatingPost'
            );
        }

        $resourcePath = '/user/{cid}/rating';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // form params
        if ($rating !== null) {
            $formParams['rating'] = ObjectSerializer::toFormValue($rating);
        }
        // form params
        if ($examDate !== null) {
            $formParams['examDate'] = ObjectSerializer::toFormValue($examDate);
        }
        // form params
        if ($examiner !== null) {
            $formParams['examiner'] = ObjectSerializer::toFormValue($examiner);
        }
        // form params
        if ($position !== null) {
            $formParams['position'] = ObjectSerializer::toFormValue($position);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidRolesFacilityRoleDelete
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidRolesFacilityRoleDelete($cid, $facility, $role)
    {
        list($response) = $this->userCidRolesFacilityRoleDeleteWithHttpInfo($cid, $facility, $role);
        return $response;
    }

    /**
     * Operation userCidRolesFacilityRoleDeleteWithHttpInfo
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidRolesFacilityRoleDeleteWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRoleDeleteRequest($cid, $facility, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidRolesFacilityRoleDeleteAsync
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRoleDeleteAsync($cid, $facility, $role)
    {
        return $this->userCidRolesFacilityRoleDeleteAsyncWithHttpInfo($cid, $facility, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidRolesFacilityRoleDeleteAsyncWithHttpInfo
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRoleDeleteAsyncWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRoleDeleteRequest($cid, $facility, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidRolesFacilityRoleDelete'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidRolesFacilityRoleDeleteRequest($cid, $facility, $role)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidRolesFacilityRoleDelete'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userCidRolesFacilityRoleDelete'
            );
        }
        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling userCidRolesFacilityRoleDelete'
            );
        }

        $resourcePath = '/user/{cid}/roles/{facility}/{role}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }
        // path params
        if ($role !== null) {
            $resourcePath = str_replace(
                '{' . 'role' . '}',
                ObjectSerializer::toPathValue($role),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidRolesFacilityRolePost
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidRolesFacilityRolePost($cid, $facility, $role)
    {
        list($response) = $this->userCidRolesFacilityRolePostWithHttpInfo($cid, $facility, $role);
        return $response;
    }

    /**
     * Operation userCidRolesFacilityRolePostWithHttpInfo
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidRolesFacilityRolePostWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRolePostRequest($cid, $facility, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidRolesFacilityRolePostAsync
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRolePostAsync($cid, $facility, $role)
    {
        return $this->userCidRolesFacilityRolePostAsyncWithHttpInfo($cid, $facility, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidRolesFacilityRolePostAsyncWithHttpInfo
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRolePostAsyncWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRolePostRequest($cid, $facility, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidRolesFacilityRolePost'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidRolesFacilityRolePostRequest($cid, $facility, $role)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidRolesFacilityRolePost'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userCidRolesFacilityRolePost'
            );
        }
        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling userCidRolesFacilityRolePost'
            );
        }

        $resourcePath = '/user/{cid}/roles/{facility}/{role}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }
        // path params
        if ($role !== null) {
            $resourcePath = str_replace(
                '{' . 'role' . '}',
                ObjectSerializer::toPathValue($role),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidTrainingOtsEvalPost
     *
     * Post new OTS Eval for a user. [Private]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userCidTrainingOtsEvalPost($cid)
    {
        $this->userCidTrainingOtsEvalPostWithHttpInfo($cid);
    }

    /**
     * Operation userCidTrainingOtsEvalPostWithHttpInfo
     *
     * Post new OTS Eval for a user. [Private]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidTrainingOtsEvalPostWithHttpInfo($cid)
    {
        $returnType = '';
        $request = $this->userCidTrainingOtsEvalPostRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidTrainingOtsEvalPostAsync
     *
     * Post new OTS Eval for a user. [Private]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTrainingOtsEvalPostAsync($cid)
    {
        return $this->userCidTrainingOtsEvalPostAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidTrainingOtsEvalPostAsyncWithHttpInfo
     *
     * Post new OTS Eval for a user. [Private]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTrainingOtsEvalPostAsyncWithHttpInfo($cid)
    {
        $returnType = '';
        $request = $this->userCidTrainingOtsEvalPostRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidTrainingOtsEvalPost'
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidTrainingOtsEvalPostRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidTrainingOtsEvalPost'
            );
        }

        $resourcePath = '/user/{cid}/training/otsEval';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidTrainingOtsEvalsGet
     *
     * Get user's OTS evaluations. [Private]
     *
     * @param  int $cid Controller ID (required)
     * @param  int $ratingId Filter by rating ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Otseval
     */
    public function userCidTrainingOtsEvalsGet($cid, $ratingId)
    {
        list($response) = $this->userCidTrainingOtsEvalsGetWithHttpInfo($cid, $ratingId);
        return $response;
    }

    /**
     * Operation userCidTrainingOtsEvalsGetWithHttpInfo
     *
     * Get user's OTS evaluations. [Private]
     *
     * @param  int $cid Controller ID (required)
     * @param  int $ratingId Filter by rating ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Otseval, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidTrainingOtsEvalsGetWithHttpInfo($cid, $ratingId)
    {
        $returnType = '\VATUSA\Client\Model\Otseval';
        $request = $this->userCidTrainingOtsEvalsGetRequest($cid, $ratingId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Otseval',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidTrainingOtsEvalsGetAsync
     *
     * Get user's OTS evaluations. [Private]
     *
     * @param  int $cid Controller ID (required)
     * @param  int $ratingId Filter by rating ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTrainingOtsEvalsGetAsync($cid, $ratingId)
    {
        return $this->userCidTrainingOtsEvalsGetAsyncWithHttpInfo($cid, $ratingId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidTrainingOtsEvalsGetAsyncWithHttpInfo
     *
     * Get user's OTS evaluations. [Private]
     *
     * @param  int $cid Controller ID (required)
     * @param  int $ratingId Filter by rating ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTrainingOtsEvalsGetAsyncWithHttpInfo($cid, $ratingId)
    {
        $returnType = '\VATUSA\Client\Model\Otseval';
        $request = $this->userCidTrainingOtsEvalsGetRequest($cid, $ratingId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidTrainingOtsEvalsGet'
     *
     * @param  int $cid Controller ID (required)
     * @param  int $ratingId Filter by rating ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidTrainingOtsEvalsGetRequest($cid, $ratingId)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidTrainingOtsEvalsGet'
            );
        }
        // verify the required parameter 'ratingId' is set
        if ($ratingId === null || (is_array($ratingId) && count($ratingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ratingId when calling userCidTrainingOtsEvalsGet'
            );
        }

        $resourcePath = '/user/{cid}/training/otsEvals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ratingId !== null) {
            $queryParams['rating_id'] = ObjectSerializer::toQueryValue($ratingId);
        }

        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidTrainingRecordsGet
     *
     * Get user's training records. [Key]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,\VATUSA\Client\Model\TrainingRecord]
     */
    public function userCidTrainingRecordsGet($cid)
    {
        list($response) = $this->userCidTrainingRecordsGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidTrainingRecordsGetWithHttpInfo
     *
     * Get user's training records. [Key]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,\VATUSA\Client\Model\TrainingRecord], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidTrainingRecordsGetWithHttpInfo($cid)
    {
        $returnType = 'map[string,\VATUSA\Client\Model\TrainingRecord]';
        $request = $this->userCidTrainingRecordsGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,\VATUSA\Client\Model\TrainingRecord]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidTrainingRecordsGetAsync
     *
     * Get user's training records. [Key]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTrainingRecordsGetAsync($cid)
    {
        return $this->userCidTrainingRecordsGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidTrainingRecordsGetAsyncWithHttpInfo
     *
     * Get user's training records. [Key]
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTrainingRecordsGetAsyncWithHttpInfo($cid)
    {
        $returnType = 'map[string,\VATUSA\Client\Model\TrainingRecord]';
        $request = $this->userCidTrainingRecordsGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidTrainingRecordsGet'
     *
     * @param  int $cid Controller ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidTrainingRecordsGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidTrainingRecordsGet'
            );
        }

        $resourcePath = '/user/{cid}/training/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidTransferChecklistGet
     *
     * Get user's transfer checklist. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20024[]
     */
    public function userCidTransferChecklistGet($cid)
    {
        list($response) = $this->userCidTransferChecklistGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidTransferChecklistGetWithHttpInfo
     *
     * Get user's transfer checklist. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20024[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidTransferChecklistGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20024[]';
        $request = $this->userCidTransferChecklistGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20024[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidTransferChecklistGetAsync
     *
     * Get user's transfer checklist. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTransferChecklistGetAsync($cid)
    {
        return $this->userCidTransferChecklistGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidTransferChecklistGetAsyncWithHttpInfo
     *
     * Get user's transfer checklist. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTransferChecklistGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20024[]';
        $request = $this->userCidTransferChecklistGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidTransferChecklistGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidTransferChecklistGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidTransferChecklistGet'
            );
        }

        $resourcePath = '/user/{cid}/transfer/checklist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidTransferHistoryGet
     *
     * Get user's transfer history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Transfer[]
     */
    public function userCidTransferHistoryGet($cid)
    {
        list($response) = $this->userCidTransferHistoryGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidTransferHistoryGetWithHttpInfo
     *
     * Get user's transfer history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Transfer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidTransferHistoryGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\Transfer[]';
        $request = $this->userCidTransferHistoryGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Transfer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidTransferHistoryGetAsync
     *
     * Get user's transfer history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTransferHistoryGetAsync($cid)
    {
        return $this->userCidTransferHistoryGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidTransferHistoryGetAsyncWithHttpInfo
     *
     * Get user's transfer history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTransferHistoryGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\Transfer[]';
        $request = $this->userCidTransferHistoryGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidTransferHistoryGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidTransferHistoryGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidTransferHistoryGet'
            );
        }

        $resourcePath = '/user/{cid}/transfer/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidTransferPost
     *
     * Submit transfer request. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $reason Reason for transfer      *                                   request (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidTransferPost($cid, $facility, $reason)
    {
        list($response) = $this->userCidTransferPostWithHttpInfo($cid, $facility, $reason);
        return $response;
    }

    /**
     * Operation userCidTransferPostWithHttpInfo
     *
     * Submit transfer request. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $reason Reason for transfer      *                                   request (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidTransferPostWithHttpInfo($cid, $facility, $reason)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidTransferPostRequest($cid, $facility, $reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidTransferPostAsync
     *
     * Submit transfer request. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $reason Reason for transfer      *                                   request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTransferPostAsync($cid, $facility, $reason)
    {
        return $this->userCidTransferPostAsyncWithHttpInfo($cid, $facility, $reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidTransferPostAsyncWithHttpInfo
     *
     * Submit transfer request. [Private]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $reason Reason for transfer      *                                   request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidTransferPostAsyncWithHttpInfo($cid, $facility, $reason)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidTransferPostRequest($cid, $facility, $reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidTransferPost'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $reason Reason for transfer      *                                   request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidTransferPostRequest($cid, $facility, $reason)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidTransferPost'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userCidTransferPost'
            );
        }
        // verify the required parameter 'reason' is set
        if ($reason === null || (is_array($reason) && count($reason) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason when calling userCidTransferPost'
            );
        }

        $resourcePath = '/user/{cid}/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($reason !== null) {
            $formParams['reason'] = ObjectSerializer::toFormValue($reason);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRolesFacilityRoleGet
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20023[]
     */
    public function userRolesFacilityRoleGet($facility, $role)
    {
        list($response) = $this->userRolesFacilityRoleGetWithHttpInfo($facility, $role);
        return $response;
    }

    /**
     * Operation userRolesFacilityRoleGetWithHttpInfo
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20023[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userRolesFacilityRoleGetWithHttpInfo($facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20023[]';
        $request = $this->userRolesFacilityRoleGetRequest($facility, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20023[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRolesFacilityRoleGetAsync
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesFacilityRoleGetAsync($facility, $role)
    {
        return $this->userRolesFacilityRoleGetAsyncWithHttpInfo($facility, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRolesFacilityRoleGetAsyncWithHttpInfo
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesFacilityRoleGetAsyncWithHttpInfo($facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20023[]';
        $request = $this->userRolesFacilityRoleGetRequest($facility, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRolesFacilityRoleGet'
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRolesFacilityRoleGetRequest($facility, $role)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userRolesFacilityRoleGet'
            );
        }
        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling userRolesFacilityRoleGet'
            );
        }

        $resourcePath = '/user/roles/{facility}/{role}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }
        // path params
        if ($role !== null) {
            $resourcePath = str_replace(
                '{' . 'role' . '}',
                ObjectSerializer::toPathValue($role),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
