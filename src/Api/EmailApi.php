<?php
/**
 * EmailApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * EmailApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation emailAddressGet
     *
     * Get info of VATUSA email address. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $address Email address (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2004[]
     */
    public function emailAddressGet($bearer, $address)
    {
        list($response) = $this->emailAddressGetWithHttpInfo($bearer, $address);
        return $response;
    }

    /**
     * Operation emailAddressGetWithHttpInfo
     *
     * Get info of VATUSA email address. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $address Email address (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2004[], HTTP status code, HTTP response headers (array of strings)
     */
    public function emailAddressGetWithHttpInfo($bearer, $address)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2004[]';
        $request = $this->emailAddressGetRequest($bearer, $address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2004[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailAddressGetAsync
     *
     * Get info of VATUSA email address. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $address Email address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailAddressGetAsync($bearer, $address)
    {
        return $this->emailAddressGetAsyncWithHttpInfo($bearer, $address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailAddressGetAsyncWithHttpInfo
     *
     * Get info of VATUSA email address. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $address Email address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailAddressGetAsyncWithHttpInfo($bearer, $address)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2004[]';
        $request = $this->emailAddressGetRequest($bearer, $address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailAddressGet'
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $address Email address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailAddressGetRequest($bearer, $address)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling emailAddressGet'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling emailAddressGet'
            );
        }

        $resourcePath = '/email/{address}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }

        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailGet
     *
     * Get info of VATUSA email address assigned for user. [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2003[]
     */
    public function emailGet($bearer)
    {
        list($response) = $this->emailGetWithHttpInfo($bearer);
        return $response;
    }

    /**
     * Operation emailGetWithHttpInfo
     *
     * Get info of VATUSA email address assigned for user. [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function emailGetWithHttpInfo($bearer)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2003[]';
        $request = $this->emailGetRequest($bearer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2003[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailGetAsync
     *
     * Get info of VATUSA email address assigned for user. [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailGetAsync($bearer)
    {
        return $this->emailGetAsyncWithHttpInfo($bearer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailGetAsyncWithHttpInfo
     *
     * Get info of VATUSA email address assigned for user. [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailGetAsyncWithHttpInfo($bearer)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2003[]';
        $request = $this->emailGetRequest($bearer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailGet'
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailGetRequest($bearer)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling emailGet'
            );
        }

        $resourcePath = '/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailHostedFacilityUsernameDelete
     *
     * Delete VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function emailHostedFacilityUsernameDelete($bearer, $username, $facility)
    {
        list($response) = $this->emailHostedFacilityUsernameDeleteWithHttpInfo($bearer, $username, $facility);
        return $response;
    }

    /**
     * Operation emailHostedFacilityUsernameDeleteWithHttpInfo
     *
     * Delete VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailHostedFacilityUsernameDeleteWithHttpInfo($bearer, $username, $facility)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->emailHostedFacilityUsernameDeleteRequest($bearer, $username, $facility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailHostedFacilityUsernameDeleteAsync
     *
     * Delete VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailHostedFacilityUsernameDeleteAsync($bearer, $username, $facility)
    {
        return $this->emailHostedFacilityUsernameDeleteAsyncWithHttpInfo($bearer, $username, $facility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailHostedFacilityUsernameDeleteAsyncWithHttpInfo
     *
     * Delete VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailHostedFacilityUsernameDeleteAsyncWithHttpInfo($bearer, $username, $facility)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->emailHostedFacilityUsernameDeleteRequest($bearer, $username, $facility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailHostedFacilityUsernameDelete'
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailHostedFacilityUsernameDeleteRequest($bearer, $username, $facility)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling emailHostedFacilityUsernameDelete'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling emailHostedFacilityUsernameDelete'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling emailHostedFacilityUsernameDelete'
            );
        }

        $resourcePath = '/email/hosted/{facility}/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailHostedFacilityUsernamePut
     *
     * Modify VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  int $cid Owning CID (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function emailHostedFacilityUsernamePut($bearer, $username, $facility, $cid = null)
    {
        list($response) = $this->emailHostedFacilityUsernamePutWithHttpInfo($bearer, $username, $facility, $cid);
        return $response;
    }

    /**
     * Operation emailHostedFacilityUsernamePutWithHttpInfo
     *
     * Modify VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  int $cid Owning CID (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailHostedFacilityUsernamePutWithHttpInfo($bearer, $username, $facility, $cid = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->emailHostedFacilityUsernamePutRequest($bearer, $username, $facility, $cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailHostedFacilityUsernamePutAsync
     *
     * Modify VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  int $cid Owning CID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailHostedFacilityUsernamePutAsync($bearer, $username, $facility, $cid = null)
    {
        return $this->emailHostedFacilityUsernamePutAsyncWithHttpInfo($bearer, $username, $facility, $cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailHostedFacilityUsernamePutAsyncWithHttpInfo
     *
     * Modify VATUSA hosted email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  int $cid Owning CID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailHostedFacilityUsernamePutAsyncWithHttpInfo($bearer, $username, $facility, $cid = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->emailHostedFacilityUsernamePutRequest($bearer, $username, $facility, $cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailHostedFacilityUsernamePut'
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $username Email username (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  int $cid Owning CID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailHostedFacilityUsernamePutRequest($bearer, $username, $facility, $cid = null)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling emailHostedFacilityUsernamePut'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling emailHostedFacilityUsernamePut'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling emailHostedFacilityUsernamePut'
            );
        }

        $resourcePath = '/email/hosted/{facility}/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cid !== null) {
            $queryParams['cid'] = ObjectSerializer::toQueryValue($cid);
        }
        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailHostedGet
     *
     * Get VATUSA hosted email accounts.  [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $facility Facility IATA ID (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2005
     */
    public function emailHostedGet($bearer, $facility = null)
    {
        list($response) = $this->emailHostedGetWithHttpInfo($bearer, $facility);
        return $response;
    }

    /**
     * Operation emailHostedGetWithHttpInfo
     *
     * Get VATUSA hosted email accounts.  [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $facility Facility IATA ID (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailHostedGetWithHttpInfo($bearer, $facility = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2005';
        $request = $this->emailHostedGetRequest($bearer, $facility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailHostedGetAsync
     *
     * Get VATUSA hosted email accounts.  [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $facility Facility IATA ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailHostedGetAsync($bearer, $facility = null)
    {
        return $this->emailHostedGetAsyncWithHttpInfo($bearer, $facility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailHostedGetAsyncWithHttpInfo
     *
     * Get VATUSA hosted email accounts.  [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $facility Facility IATA ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailHostedGetAsyncWithHttpInfo($bearer, $facility = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2005';
        $request = $this->emailHostedGetRequest($bearer, $facility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailHostedGet'
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $facility Facility IATA ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailHostedGetRequest($bearer, $facility = null)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling emailHostedGet'
            );
        }

        $resourcePath = '/email/hosted';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($facility !== null) {
            $queryParams['facility'] = ObjectSerializer::toQueryValue($facility);
        }
        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailPut
     *
     * Modify email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $email Email Address (required)
     * @param  string $destination Set destination for forwarded address (optional)
     * @param  string $password Password for full account (optional)
     * @param  bool $static Is static forward or not (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function emailPut($bearer, $email, $destination = null, $password = null, $static = null)
    {
        list($response) = $this->emailPutWithHttpInfo($bearer, $email, $destination, $password, $static);
        return $response;
    }

    /**
     * Operation emailPutWithHttpInfo
     *
     * Modify email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $email Email Address (required)
     * @param  string $destination Set destination for forwarded address (optional)
     * @param  string $password Password for full account (optional)
     * @param  bool $static Is static forward or not (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailPutWithHttpInfo($bearer, $email, $destination = null, $password = null, $static = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->emailPutRequest($bearer, $email, $destination, $password, $static);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailPutAsync
     *
     * Modify email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $email Email Address (required)
     * @param  string $destination Set destination for forwarded address (optional)
     * @param  string $password Password for full account (optional)
     * @param  bool $static Is static forward or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailPutAsync($bearer, $email, $destination = null, $password = null, $static = null)
    {
        return $this->emailPutAsyncWithHttpInfo($bearer, $email, $destination, $password, $static)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailPutAsyncWithHttpInfo
     *
     * Modify email account. [Private]
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $email Email Address (required)
     * @param  string $destination Set destination for forwarded address (optional)
     * @param  string $password Password for full account (optional)
     * @param  bool $static Is static forward or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailPutAsyncWithHttpInfo($bearer, $email, $destination = null, $password = null, $static = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->emailPutRequest($bearer, $email, $destination, $password, $static);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailPut'
     *
     * @param  string $bearer JWT Token (required)
     * @param  string $email Email Address (required)
     * @param  string $destination Set destination for forwarded address (optional)
     * @param  string $password Password for full account (optional)
     * @param  bool $static Is static forward or not (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailPutRequest($bearer, $email, $destination = null, $password = null, $static = null)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling emailPut'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling emailPut'
            );
        }

        $resourcePath = '/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($destination !== null) {
            $queryParams['destination'] = ObjectSerializer::toQueryValue($destination);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($static !== null) {
            $queryParams['static'] = ObjectSerializer::toQueryValue($static);
        }
        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdEmailTemplateNameGet
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\EmailTemplate
     */
    public function facilityIdEmailTemplateNameGet($id, $templateName)
    {
        list($response) = $this->facilityIdEmailTemplateNameGetWithHttpInfo($id, $templateName);
        return $response;
    }

    /**
     * Operation facilityIdEmailTemplateNameGetWithHttpInfo
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\EmailTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdEmailTemplateNameGetWithHttpInfo($id, $templateName)
    {
        $returnType = '\VATUSA\Client\Model\EmailTemplate';
        $request = $this->facilityIdEmailTemplateNameGetRequest($id, $templateName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\EmailTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdEmailTemplateNameGetAsync
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNameGetAsync($id, $templateName)
    {
        return $this->facilityIdEmailTemplateNameGetAsyncWithHttpInfo($id, $templateName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdEmailTemplateNameGetAsyncWithHttpInfo
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNameGetAsyncWithHttpInfo($id, $templateName)
    {
        $returnType = '\VATUSA\Client\Model\EmailTemplate';
        $request = $this->facilityIdEmailTemplateNameGetRequest($id, $templateName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdEmailTemplateNameGet'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdEmailTemplateNameGetRequest($id, $templateName)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdEmailTemplateNameGet'
            );
        }
        // verify the required parameter 'templateName' is set
        if ($templateName === null || (is_array($templateName) && count($templateName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateName when calling facilityIdEmailTemplateNameGet'
            );
        }

        $resourcePath = '/facility/{id}/email/{templateName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                '{' . 'templateName' . '}',
                ObjectSerializer::toPathValue($templateName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdEmailTemplateNamePost
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20010
     */
    public function facilityIdEmailTemplateNamePost($id, $templateName, $body)
    {
        list($response) = $this->facilityIdEmailTemplateNamePostWithHttpInfo($id, $templateName, $body);
        return $response;
    }

    /**
     * Operation facilityIdEmailTemplateNamePostWithHttpInfo
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdEmailTemplateNamePostWithHttpInfo($id, $templateName, $body)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20010';
        $request = $this->facilityIdEmailTemplateNamePostRequest($id, $templateName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdEmailTemplateNamePostAsync
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNamePostAsync($id, $templateName, $body)
    {
        return $this->facilityIdEmailTemplateNamePostAsyncWithHttpInfo($id, $templateName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdEmailTemplateNamePostAsyncWithHttpInfo
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNamePostAsyncWithHttpInfo($id, $templateName, $body)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20010';
        $request = $this->facilityIdEmailTemplateNamePostRequest($id, $templateName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdEmailTemplateNamePost'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdEmailTemplateNamePostRequest($id, $templateName, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdEmailTemplateNamePost'
            );
        }
        // verify the required parameter 'templateName' is set
        if ($templateName === null || (is_array($templateName) && count($templateName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateName when calling facilityIdEmailTemplateNamePost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling facilityIdEmailTemplateNamePost'
            );
        }

        $resourcePath = '/facility/{id}/email/{templateName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                '{' . 'templateName' . '}',
                ObjectSerializer::toPathValue($templateName),
                $resourcePath
            );
        }

        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
