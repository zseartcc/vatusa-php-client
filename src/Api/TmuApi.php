<?php
/**
 * TmuApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * TmuApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TmuApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation tmuNoticeIdDelete
     *
     * Delete TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function tmuNoticeIdDelete($id)
    {
        list($response) = $this->tmuNoticeIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation tmuNoticeIdDeleteWithHttpInfo
     *
     * Delete TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function tmuNoticeIdDeleteWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->tmuNoticeIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tmuNoticeIdDeleteAsync
     *
     * Delete TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticeIdDeleteAsync($id)
    {
        return $this->tmuNoticeIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tmuNoticeIdDeleteAsyncWithHttpInfo
     *
     * Delete TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticeIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->tmuNoticeIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tmuNoticeIdDelete'
     *
     * @param  int $id TMU Notice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tmuNoticeIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tmuNoticeIdDelete'
            );
        }

        $resourcePath = '/tmu/notice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tmuNoticeIdGet
     *
     * Get TMU Notice info.
     *
     * @param  string $id TMU Notice ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20022[]
     */
    public function tmuNoticeIdGet($id)
    {
        list($response) = $this->tmuNoticeIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation tmuNoticeIdGetWithHttpInfo
     *
     * Get TMU Notice info.
     *
     * @param  string $id TMU Notice ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20022[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tmuNoticeIdGetWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20022[]';
        $request = $this->tmuNoticeIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20022[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tmuNoticeIdGetAsync
     *
     * Get TMU Notice info.
     *
     * @param  string $id TMU Notice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticeIdGetAsync($id)
    {
        return $this->tmuNoticeIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tmuNoticeIdGetAsyncWithHttpInfo
     *
     * Get TMU Notice info.
     *
     * @param  string $id TMU Notice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticeIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20022[]';
        $request = $this->tmuNoticeIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tmuNoticeIdGet'
     *
     * @param  string $id TMU Notice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tmuNoticeIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tmuNoticeIdGet'
            );
        }

        $resourcePath = '/tmu/notice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tmuNoticeIdPut
     *
     * Edit TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     * @param  string $facility TMU Facility/Map ID (optional)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (optional)
     * @param  string $message Notice content (optional)
     * @param  string $startDate Start time (YYYY-MM-DD HH:MM) (optional)
     * @param  string $expireDate Expiration time (YYYY-MM-DD HH:MM) - null for no     expiration (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay. (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20014
     */
    public function tmuNoticeIdPut($id, $facility = null, $priority = null, $message = null, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        list($response) = $this->tmuNoticeIdPutWithHttpInfo($id, $facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute);
        return $response;
    }

    /**
     * Operation tmuNoticeIdPutWithHttpInfo
     *
     * Edit TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     * @param  string $facility TMU Facility/Map ID (optional)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (optional)
     * @param  string $message Notice content (optional)
     * @param  string $startDate Start time (YYYY-MM-DD HH:MM) (optional)
     * @param  string $expireDate Expiration time (YYYY-MM-DD HH:MM) - null for no     expiration (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay. (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function tmuNoticeIdPutWithHttpInfo($id, $facility = null, $priority = null, $message = null, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20014';
        $request = $this->tmuNoticeIdPutRequest($id, $facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tmuNoticeIdPutAsync
     *
     * Edit TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     * @param  string $facility TMU Facility/Map ID (optional)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (optional)
     * @param  string $message Notice content (optional)
     * @param  string $startDate Start time (YYYY-MM-DD HH:MM) (optional)
     * @param  string $expireDate Expiration time (YYYY-MM-DD HH:MM) - null for no     expiration (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay. (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticeIdPutAsync($id, $facility = null, $priority = null, $message = null, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        return $this->tmuNoticeIdPutAsyncWithHttpInfo($id, $facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tmuNoticeIdPutAsyncWithHttpInfo
     *
     * Edit TMU Notice. [Key]
     *
     * @param  int $id TMU Notice ID (required)
     * @param  string $facility TMU Facility/Map ID (optional)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (optional)
     * @param  string $message Notice content (optional)
     * @param  string $startDate Start time (YYYY-MM-DD HH:MM) (optional)
     * @param  string $expireDate Expiration time (YYYY-MM-DD HH:MM) - null for no     expiration (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay. (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticeIdPutAsyncWithHttpInfo($id, $facility = null, $priority = null, $message = null, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20014';
        $request = $this->tmuNoticeIdPutRequest($id, $facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tmuNoticeIdPut'
     *
     * @param  int $id TMU Notice ID (required)
     * @param  string $facility TMU Facility/Map ID (optional)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (optional)
     * @param  string $message Notice content (optional)
     * @param  string $startDate Start time (YYYY-MM-DD HH:MM) (optional)
     * @param  string $expireDate Expiration time (YYYY-MM-DD HH:MM) - null for no     expiration (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay. (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tmuNoticeIdPutRequest($id, $facility = null, $priority = null, $message = null, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling tmuNoticeIdPut'
            );
        }

        $resourcePath = '/tmu/notice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($priority !== null) {
            $formParams['priority'] = ObjectSerializer::toFormValue($priority);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($startDate !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($startDate);
        }
        // form params
        if ($expireDate !== null) {
            $formParams['expire_date'] = ObjectSerializer::toFormValue($expireDate);
        }
        // form params
        if ($isDelay !== null) {
            $formParams['is_delay'] = ObjectSerializer::toFormValue($isDelay);
        }
        // form params
        if ($isPrefRoute !== null) {
            $formParams['is_pref_route'] = ObjectSerializer::toFormValue($isPrefRoute);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tmuNoticesGet
     *
     * Get list of TMU Notices.
     *
     * @param  string $facility TMU Facility/Map ID (optional) (optional)
     * @param  bool $children If a parent map is selected,     include its children TMU&#39;s Notices. (optional)
     * @param  bool $onlyactive Only include active notices.     Default &#x3D; true. (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20021[]
     */
    public function tmuNoticesGet($facility = null, $children = null, $onlyactive = null)
    {
        list($response) = $this->tmuNoticesGetWithHttpInfo($facility, $children, $onlyactive);
        return $response;
    }

    /**
     * Operation tmuNoticesGetWithHttpInfo
     *
     * Get list of TMU Notices.
     *
     * @param  string $facility TMU Facility/Map ID (optional) (optional)
     * @param  bool $children If a parent map is selected,     include its children TMU&#39;s Notices. (optional)
     * @param  bool $onlyactive Only include active notices.     Default &#x3D; true. (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20021[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tmuNoticesGetWithHttpInfo($facility = null, $children = null, $onlyactive = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20021[]';
        $request = $this->tmuNoticesGetRequest($facility, $children, $onlyactive);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20021[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tmuNoticesGetAsync
     *
     * Get list of TMU Notices.
     *
     * @param  string $facility TMU Facility/Map ID (optional) (optional)
     * @param  bool $children If a parent map is selected,     include its children TMU&#39;s Notices. (optional)
     * @param  bool $onlyactive Only include active notices.     Default &#x3D; true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticesGetAsync($facility = null, $children = null, $onlyactive = null)
    {
        return $this->tmuNoticesGetAsyncWithHttpInfo($facility, $children, $onlyactive)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tmuNoticesGetAsyncWithHttpInfo
     *
     * Get list of TMU Notices.
     *
     * @param  string $facility TMU Facility/Map ID (optional) (optional)
     * @param  bool $children If a parent map is selected,     include its children TMU&#39;s Notices. (optional)
     * @param  bool $onlyactive Only include active notices.     Default &#x3D; true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticesGetAsyncWithHttpInfo($facility = null, $children = null, $onlyactive = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20021[]';
        $request = $this->tmuNoticesGetRequest($facility, $children, $onlyactive);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tmuNoticesGet'
     *
     * @param  string $facility TMU Facility/Map ID (optional) (optional)
     * @param  bool $children If a parent map is selected,     include its children TMU&#39;s Notices. (optional)
     * @param  bool $onlyactive Only include active notices.     Default &#x3D; true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tmuNoticesGetRequest($facility = null, $children = null, $onlyactive = null)
    {

        $resourcePath = '/tmu/notices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($facility !== null) {
            $queryParams['facility'] = ObjectSerializer::toQueryValue($facility);
        }
        // query params
        if ($children !== null) {
            $queryParams['children'] = ObjectSerializer::toQueryValue($children);
        }
        // query params
        if ($onlyactive !== null) {
            $queryParams['onlyactive'] = ObjectSerializer::toQueryValue($onlyactive);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tmuNoticesPost
     *
     * Add new TMU Notice. [Key]
     *
     * @param  string $facility TMU Facility/Map ID (required)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (required)
     * @param  string $message Notice content (required)
     * @param  string $startDate Effective date (YYYY-MM-DD     HH:MM) (optional)
     * @param  string $expireDate Expiration date (YYYY-MM-DD     HH:MM) (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20014
     */
    public function tmuNoticesPost($facility, $priority, $message, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        list($response) = $this->tmuNoticesPostWithHttpInfo($facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute);
        return $response;
    }

    /**
     * Operation tmuNoticesPostWithHttpInfo
     *
     * Add new TMU Notice. [Key]
     *
     * @param  string $facility TMU Facility/Map ID (required)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (required)
     * @param  string $message Notice content (required)
     * @param  string $startDate Effective date (YYYY-MM-DD     HH:MM) (optional)
     * @param  string $expireDate Expiration date (YYYY-MM-DD     HH:MM) (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function tmuNoticesPostWithHttpInfo($facility, $priority, $message, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20014';
        $request = $this->tmuNoticesPostRequest($facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tmuNoticesPostAsync
     *
     * Add new TMU Notice. [Key]
     *
     * @param  string $facility TMU Facility/Map ID (required)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (required)
     * @param  string $message Notice content (required)
     * @param  string $startDate Effective date (YYYY-MM-DD     HH:MM) (optional)
     * @param  string $expireDate Expiration date (YYYY-MM-DD     HH:MM) (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticesPostAsync($facility, $priority, $message, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        return $this->tmuNoticesPostAsyncWithHttpInfo($facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tmuNoticesPostAsyncWithHttpInfo
     *
     * Add new TMU Notice. [Key]
     *
     * @param  string $facility TMU Facility/Map ID (required)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (required)
     * @param  string $message Notice content (required)
     * @param  string $startDate Effective date (YYYY-MM-DD     HH:MM) (optional)
     * @param  string $expireDate Expiration date (YYYY-MM-DD     HH:MM) (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tmuNoticesPostAsyncWithHttpInfo($facility, $priority, $message, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20014';
        $request = $this->tmuNoticesPostRequest($facility, $priority, $message, $startDate, $expireDate, $isDelay, $isPrefRoute);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tmuNoticesPost'
     *
     * @param  string $facility TMU Facility/Map ID (required)
     * @param  string $priority Priority of notice     (1: Low, 2: Standard, 3: Urgent) (required)
     * @param  string $message Notice content (required)
     * @param  string $startDate Effective date (YYYY-MM-DD     HH:MM) (optional)
     * @param  string $expireDate Expiration date (YYYY-MM-DD     HH:MM) (optional)
     * @param  bool $isDelay TMU Notice is a ground stop or delay (optional)
     * @param  bool $isPrefRoute TMU Notice is a preferred routing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tmuNoticesPostRequest($facility, $priority, $message, $startDate = null, $expireDate = null, $isDelay = null, $isPrefRoute = null)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling tmuNoticesPost'
            );
        }
        // verify the required parameter 'priority' is set
        if ($priority === null || (is_array($priority) && count($priority) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $priority when calling tmuNoticesPost'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling tmuNoticesPost'
            );
        }

        $resourcePath = '/tmu/notices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($priority !== null) {
            $formParams['priority'] = ObjectSerializer::toFormValue($priority);
        }
        // form params
        if ($message !== null) {
            $formParams['message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($startDate !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($startDate);
        }
        // form params
        if ($expireDate !== null) {
            $formParams['expire_date'] = ObjectSerializer::toFormValue($expireDate);
        }
        // form params
        if ($isDelay !== null) {
            $formParams['is_delay'] = ObjectSerializer::toFormValue($isDelay);
        }
        // form params
        if ($isPrefRoute !== null) {
            $formParams['is_pref_route'] = ObjectSerializer::toFormValue($isPrefRoute);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
