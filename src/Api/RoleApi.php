<?php
/**
 * RoleApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * RoleApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userCidRolesFacilityRoleDelete
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidRolesFacilityRoleDelete($cid, $facility, $role)
    {
        list($response) = $this->userCidRolesFacilityRoleDeleteWithHttpInfo($cid, $facility, $role);
        return $response;
    }

    /**
     * Operation userCidRolesFacilityRoleDeleteWithHttpInfo
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidRolesFacilityRoleDeleteWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRoleDeleteRequest($cid, $facility, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidRolesFacilityRoleDeleteAsync
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRoleDeleteAsync($cid, $facility, $role)
    {
        return $this->userCidRolesFacilityRoleDeleteAsyncWithHttpInfo($cid, $facility, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidRolesFacilityRoleDeleteAsyncWithHttpInfo
     *
     * Delete role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRoleDeleteAsyncWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRoleDeleteRequest($cid, $facility, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidRolesFacilityRoleDelete'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidRolesFacilityRoleDeleteRequest($cid, $facility, $role)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidRolesFacilityRoleDelete'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userCidRolesFacilityRoleDelete'
            );
        }
        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling userCidRolesFacilityRoleDelete'
            );
        }

        $resourcePath = '/user/{cid}/roles/{facility}/{role}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }
        // path params
        if ($role !== null) {
            $resourcePath = str_replace(
                '{' . 'role' . '}',
                ObjectSerializer::toPathValue($role),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidRolesFacilityRolePost
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidRolesFacilityRolePost($cid, $facility, $role)
    {
        list($response) = $this->userCidRolesFacilityRolePostWithHttpInfo($cid, $facility, $role);
        return $response;
    }

    /**
     * Operation userCidRolesFacilityRolePostWithHttpInfo
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidRolesFacilityRolePostWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRolePostRequest($cid, $facility, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidRolesFacilityRolePostAsync
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRolePostAsync($cid, $facility, $role)
    {
        return $this->userCidRolesFacilityRolePostAsyncWithHttpInfo($cid, $facility, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidRolesFacilityRolePostAsyncWithHttpInfo
     *
     * Assign new role. [Auth]
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidRolesFacilityRolePostAsyncWithHttpInfo($cid, $facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidRolesFacilityRolePostRequest($cid, $facility, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidRolesFacilityRolePost'
     *
     * @param  int $cid CERT ID (required)
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidRolesFacilityRolePostRequest($cid, $facility, $role)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidRolesFacilityRolePost'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userCidRolesFacilityRolePost'
            );
        }
        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling userCidRolesFacilityRolePost'
            );
        }

        $resourcePath = '/user/{cid}/roles/{facility}/{role}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }
        // path params
        if ($role !== null) {
            $resourcePath = str_replace(
                '{' . 'role' . '}',
                ObjectSerializer::toPathValue($role),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRolesFacilityRoleGet
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20023[]
     */
    public function userRolesFacilityRoleGet($facility, $role)
    {
        list($response) = $this->userRolesFacilityRoleGetWithHttpInfo($facility, $role);
        return $response;
    }

    /**
     * Operation userRolesFacilityRoleGetWithHttpInfo
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20023[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userRolesFacilityRoleGetWithHttpInfo($facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20023[]';
        $request = $this->userRolesFacilityRoleGetRequest($facility, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20023[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRolesFacilityRoleGetAsync
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesFacilityRoleGetAsync($facility, $role)
    {
        return $this->userRolesFacilityRoleGetAsyncWithHttpInfo($facility, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRolesFacilityRoleGetAsyncWithHttpInfo
     *
     * Get users assigned to specific staff role.
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesFacilityRoleGetAsyncWithHttpInfo($facility, $role)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20023[]';
        $request = $this->userRolesFacilityRoleGetRequest($facility, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRolesFacilityRoleGet'
     *
     * @param  string $facility Facility IATA ID (required)
     * @param  string $role Role (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRolesFacilityRoleGetRequest($facility, $role)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling userRolesFacilityRoleGet'
            );
        }
        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling userRolesFacilityRoleGet'
            );
        }

        $resourcePath = '/user/roles/{facility}/{role}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }
        // path params
        if ($role !== null) {
            $resourcePath = str_replace(
                '{' . 'role' . '}',
                ObjectSerializer::toPathValue($role),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
