<?php
/**
 * FacilityApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * FacilityApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FacilityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation facilityFacilityTrainingRecordsGet
     *
     * Get facility's training records. [Key]
     *
     * @param  string $facility Facility (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\TrainingRecord
     */
    public function facilityFacilityTrainingRecordsGet($facility)
    {
        list($response) = $this->facilityFacilityTrainingRecordsGetWithHttpInfo($facility);
        return $response;
    }

    /**
     * Operation facilityFacilityTrainingRecordsGetWithHttpInfo
     *
     * Get facility's training records. [Key]
     *
     * @param  string $facility Facility (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\TrainingRecord, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityFacilityTrainingRecordsGetWithHttpInfo($facility)
    {
        $returnType = '\VATUSA\Client\Model\TrainingRecord';
        $request = $this->facilityFacilityTrainingRecordsGetRequest($facility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\TrainingRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityFacilityTrainingRecordsGetAsync
     *
     * Get facility's training records. [Key]
     *
     * @param  string $facility Facility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityFacilityTrainingRecordsGetAsync($facility)
    {
        return $this->facilityFacilityTrainingRecordsGetAsyncWithHttpInfo($facility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityFacilityTrainingRecordsGetAsyncWithHttpInfo
     *
     * Get facility's training records. [Key]
     *
     * @param  string $facility Facility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityFacilityTrainingRecordsGetAsyncWithHttpInfo($facility)
    {
        $returnType = '\VATUSA\Client\Model\TrainingRecord';
        $request = $this->facilityFacilityTrainingRecordsGetRequest($facility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityFacilityTrainingRecordsGet'
     *
     * @param  string $facility Facility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityFacilityTrainingRecordsGetRequest($facility)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling facilityFacilityTrainingRecordsGet'
            );
        }

        $resourcePath = '/facility/{facility}/training/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityGet
     *
     * Get list of VATUSA facilities.
     *
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Facility[]
     */
    public function facilityGet()
    {
        list($response) = $this->facilityGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation facilityGetWithHttpInfo
     *
     * Get list of VATUSA facilities.
     *
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Facility[], HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityGetWithHttpInfo()
    {
        $returnType = '\VATUSA\Client\Model\Facility[]';
        $request = $this->facilityGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Facility[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityGetAsync
     *
     * Get list of VATUSA facilities.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityGetAsync()
    {
        return $this->facilityGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityGetAsyncWithHttpInfo
     *
     * Get list of VATUSA facilities.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityGetAsyncWithHttpInfo()
    {
        $returnType = '\VATUSA\Client\Model\Facility[]';
        $request = $this->facilityGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityGetRequest()
    {

        $resourcePath = '/facility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdEmailTemplateNameGet
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\EmailTemplate
     */
    public function facilityIdEmailTemplateNameGet($id, $templateName)
    {
        list($response) = $this->facilityIdEmailTemplateNameGetWithHttpInfo($id, $templateName);
        return $response;
    }

    /**
     * Operation facilityIdEmailTemplateNameGetWithHttpInfo
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\EmailTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdEmailTemplateNameGetWithHttpInfo($id, $templateName)
    {
        $returnType = '\VATUSA\Client\Model\EmailTemplate';
        $request = $this->facilityIdEmailTemplateNameGetRequest($id, $templateName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\EmailTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdEmailTemplateNameGetAsync
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNameGetAsync($id, $templateName)
    {
        return $this->facilityIdEmailTemplateNameGetAsyncWithHttpInfo($id, $templateName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdEmailTemplateNameGetAsyncWithHttpInfo
     *
     * Get facility's email template. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNameGetAsyncWithHttpInfo($id, $templateName)
    {
        $returnType = '\VATUSA\Client\Model\EmailTemplate';
        $request = $this->facilityIdEmailTemplateNameGetRequest($id, $templateName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdEmailTemplateNameGet'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,     examfailed, exampassed) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdEmailTemplateNameGetRequest($id, $templateName)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdEmailTemplateNameGet'
            );
        }
        // verify the required parameter 'templateName' is set
        if ($templateName === null || (is_array($templateName) && count($templateName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateName when calling facilityIdEmailTemplateNameGet'
            );
        }

        $resourcePath = '/facility/{id}/email/{templateName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                '{' . 'templateName' . '}',
                ObjectSerializer::toPathValue($templateName),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdEmailTemplateNamePost
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20010
     */
    public function facilityIdEmailTemplateNamePost($id, $templateName, $body)
    {
        list($response) = $this->facilityIdEmailTemplateNamePostWithHttpInfo($id, $templateName, $body);
        return $response;
    }

    /**
     * Operation facilityIdEmailTemplateNamePostWithHttpInfo
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdEmailTemplateNamePostWithHttpInfo($id, $templateName, $body)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20010';
        $request = $this->facilityIdEmailTemplateNamePostRequest($id, $templateName, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdEmailTemplateNamePostAsync
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNamePostAsync($id, $templateName, $body)
    {
        return $this->facilityIdEmailTemplateNamePostAsyncWithHttpInfo($id, $templateName, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdEmailTemplateNamePostAsyncWithHttpInfo
     *
     * Modify facility's email template. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdEmailTemplateNamePostAsyncWithHttpInfo($id, $templateName, $body)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20010';
        $request = $this->facilityIdEmailTemplateNamePostRequest($id, $templateName, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdEmailTemplateNamePost'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $templateName Name of template (welcome, examassigned,      *                                         examfailed, exampassed) (required)
     * @param  string $body Text of template (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdEmailTemplateNamePostRequest($id, $templateName, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdEmailTemplateNamePost'
            );
        }
        // verify the required parameter 'templateName' is set
        if ($templateName === null || (is_array($templateName) && count($templateName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateName when calling facilityIdEmailTemplateNamePost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling facilityIdEmailTemplateNamePost'
            );
        }

        $resourcePath = '/facility/{id}/email/{templateName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($templateName !== null) {
            $resourcePath = str_replace(
                '{' . 'templateName' . '}',
                ObjectSerializer::toPathValue($templateName),
                $resourcePath
            );
        }

        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdGet
     *
     * Get facility information.
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2008
     */
    public function facilityIdGet($id)
    {
        list($response) = $this->facilityIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation facilityIdGetWithHttpInfo
     *
     * Get facility information.
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdGetWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2008';
        $request = $this->facilityIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdGetAsync
     *
     * Get facility information.
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdGetAsync($id)
    {
        return $this->facilityIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdGetAsyncWithHttpInfo
     *
     * Get facility information.
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2008';
        $request = $this->facilityIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdGet'
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdGet'
            );
        }

        $resourcePath = '/facility/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdPut
     *
     * Update facility information. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Change facility URL (optional)
     * @param  string $urlDev Change facility Dev URL(s) (optional)
     * @param  string $uls2jwk Request new ULS JWK (optional)
     * @param  string $apiv2jwk Request new APIv2 JWK (optional)
     * @param  bool $jwkdev Request new testing JWK (optional)
     * @param  string $apikey Request new API Key for facility (optional)
     * @param  string $apikeySandbox Request new Sandbox API Key     for facility (optional)
     * @param  string $ulsSecret Request new ULS Secret, role     restricted (optional)
     * @param  string $ulsReturn Set new ULS return point, role     restricted (optional)
     * @param  string $ulsDevReturn Set new ULS developmental     return point (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2009
     */
    public function facilityIdPut($id, $url = null, $urlDev = null, $uls2jwk = null, $apiv2jwk = null, $jwkdev = null, $apikey = null, $apikeySandbox = null, $ulsSecret = null, $ulsReturn = null, $ulsDevReturn = null)
    {
        list($response) = $this->facilityIdPutWithHttpInfo($id, $url, $urlDev, $uls2jwk, $apiv2jwk, $jwkdev, $apikey, $apikeySandbox, $ulsSecret, $ulsReturn, $ulsDevReturn);
        return $response;
    }

    /**
     * Operation facilityIdPutWithHttpInfo
     *
     * Update facility information. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Change facility URL (optional)
     * @param  string $urlDev Change facility Dev URL(s) (optional)
     * @param  string $uls2jwk Request new ULS JWK (optional)
     * @param  string $apiv2jwk Request new APIv2 JWK (optional)
     * @param  bool $jwkdev Request new testing JWK (optional)
     * @param  string $apikey Request new API Key for facility (optional)
     * @param  string $apikeySandbox Request new Sandbox API Key     for facility (optional)
     * @param  string $ulsSecret Request new ULS Secret, role     restricted (optional)
     * @param  string $ulsReturn Set new ULS return point, role     restricted (optional)
     * @param  string $ulsDevReturn Set new ULS developmental     return point (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdPutWithHttpInfo($id, $url = null, $urlDev = null, $uls2jwk = null, $apiv2jwk = null, $jwkdev = null, $apikey = null, $apikeySandbox = null, $ulsSecret = null, $ulsReturn = null, $ulsDevReturn = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2009';
        $request = $this->facilityIdPutRequest($id, $url, $urlDev, $uls2jwk, $apiv2jwk, $jwkdev, $apikey, $apikeySandbox, $ulsSecret, $ulsReturn, $ulsDevReturn);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdPutAsync
     *
     * Update facility information. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Change facility URL (optional)
     * @param  string $urlDev Change facility Dev URL(s) (optional)
     * @param  string $uls2jwk Request new ULS JWK (optional)
     * @param  string $apiv2jwk Request new APIv2 JWK (optional)
     * @param  bool $jwkdev Request new testing JWK (optional)
     * @param  string $apikey Request new API Key for facility (optional)
     * @param  string $apikeySandbox Request new Sandbox API Key     for facility (optional)
     * @param  string $ulsSecret Request new ULS Secret, role     restricted (optional)
     * @param  string $ulsReturn Set new ULS return point, role     restricted (optional)
     * @param  string $ulsDevReturn Set new ULS developmental     return point (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdPutAsync($id, $url = null, $urlDev = null, $uls2jwk = null, $apiv2jwk = null, $jwkdev = null, $apikey = null, $apikeySandbox = null, $ulsSecret = null, $ulsReturn = null, $ulsDevReturn = null)
    {
        return $this->facilityIdPutAsyncWithHttpInfo($id, $url, $urlDev, $uls2jwk, $apiv2jwk, $jwkdev, $apikey, $apikeySandbox, $ulsSecret, $ulsReturn, $ulsDevReturn)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdPutAsyncWithHttpInfo
     *
     * Update facility information. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Change facility URL (optional)
     * @param  string $urlDev Change facility Dev URL(s) (optional)
     * @param  string $uls2jwk Request new ULS JWK (optional)
     * @param  string $apiv2jwk Request new APIv2 JWK (optional)
     * @param  bool $jwkdev Request new testing JWK (optional)
     * @param  string $apikey Request new API Key for facility (optional)
     * @param  string $apikeySandbox Request new Sandbox API Key     for facility (optional)
     * @param  string $ulsSecret Request new ULS Secret, role     restricted (optional)
     * @param  string $ulsReturn Set new ULS return point, role     restricted (optional)
     * @param  string $ulsDevReturn Set new ULS developmental     return point (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdPutAsyncWithHttpInfo($id, $url = null, $urlDev = null, $uls2jwk = null, $apiv2jwk = null, $jwkdev = null, $apikey = null, $apikeySandbox = null, $ulsSecret = null, $ulsReturn = null, $ulsDevReturn = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2009';
        $request = $this->facilityIdPutRequest($id, $url, $urlDev, $uls2jwk, $apiv2jwk, $jwkdev, $apikey, $apikeySandbox, $ulsSecret, $ulsReturn, $ulsDevReturn);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdPut'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Change facility URL (optional)
     * @param  string $urlDev Change facility Dev URL(s) (optional)
     * @param  string $uls2jwk Request new ULS JWK (optional)
     * @param  string $apiv2jwk Request new APIv2 JWK (optional)
     * @param  bool $jwkdev Request new testing JWK (optional)
     * @param  string $apikey Request new API Key for facility (optional)
     * @param  string $apikeySandbox Request new Sandbox API Key     for facility (optional)
     * @param  string $ulsSecret Request new ULS Secret, role     restricted (optional)
     * @param  string $ulsReturn Set new ULS return point, role     restricted (optional)
     * @param  string $ulsDevReturn Set new ULS developmental     return point (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdPutRequest($id, $url = null, $urlDev = null, $uls2jwk = null, $apiv2jwk = null, $jwkdev = null, $apikey = null, $apikeySandbox = null, $ulsSecret = null, $ulsReturn = null, $ulsDevReturn = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdPut'
            );
        }

        $resourcePath = '/facility/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($urlDev !== null) {
            $formParams['url_dev'] = ObjectSerializer::toFormValue($urlDev);
        }
        // form params
        if ($uls2jwk !== null) {
            $formParams['uls2jwk'] = ObjectSerializer::toFormValue($uls2jwk);
        }
        // form params
        if ($apiv2jwk !== null) {
            $formParams['apiv2jwk'] = ObjectSerializer::toFormValue($apiv2jwk);
        }
        // form params
        if ($jwkdev !== null) {
            $formParams['jwkdev'] = ObjectSerializer::toFormValue($jwkdev);
        }
        // form params
        if ($apikey !== null) {
            $formParams['apikey'] = ObjectSerializer::toFormValue($apikey);
        }
        // form params
        if ($apikeySandbox !== null) {
            $formParams['apikeySandbox'] = ObjectSerializer::toFormValue($apikeySandbox);
        }
        // form params
        if ($ulsSecret !== null) {
            $formParams['ulsSecret'] = ObjectSerializer::toFormValue($ulsSecret);
        }
        // form params
        if ($ulsReturn !== null) {
            $formParams['ulsReturn'] = ObjectSerializer::toFormValue($ulsReturn);
        }
        // form params
        if ($ulsDevReturn !== null) {
            $formParams['ulsDevReturn'] = ObjectSerializer::toFormValue($ulsDevReturn);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdRosterCidDelete
     *
     * Delete member from facility roster. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  \VATUSA\Client\Model\DeleteMemberRequest $deleteMemberRequest deleteMemberRequest (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function facilityIdRosterCidDelete($id, $cid, $deleteMemberRequest)
    {
        list($response) = $this->facilityIdRosterCidDeleteWithHttpInfo($id, $cid, $deleteMemberRequest);
        return $response;
    }

    /**
     * Operation facilityIdRosterCidDeleteWithHttpInfo
     *
     * Delete member from facility roster. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  \VATUSA\Client\Model\DeleteMemberRequest $deleteMemberRequest (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdRosterCidDeleteWithHttpInfo($id, $cid, $deleteMemberRequest)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdRosterCidDeleteRequest($id, $cid, $deleteMemberRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdRosterCidDeleteAsync
     *
     * Delete member from facility roster. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  \VATUSA\Client\Model\DeleteMemberRequest $deleteMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterCidDeleteAsync($id, $cid, $deleteMemberRequest)
    {
        return $this->facilityIdRosterCidDeleteAsyncWithHttpInfo($id, $cid, $deleteMemberRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdRosterCidDeleteAsyncWithHttpInfo
     *
     * Delete member from facility roster. [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  \VATUSA\Client\Model\DeleteMemberRequest $deleteMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterCidDeleteAsyncWithHttpInfo($id, $cid, $deleteMemberRequest)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdRosterCidDeleteRequest($id, $cid, $deleteMemberRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdRosterCidDelete'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  \VATUSA\Client\Model\DeleteMemberRequest $deleteMemberRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdRosterCidDeleteRequest($id, $cid, $deleteMemberRequest)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdRosterCidDelete'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling facilityIdRosterCidDelete'
            );
        }
        // verify the required parameter 'deleteMemberRequest' is set
        if ($deleteMemberRequest === null || (is_array($deleteMemberRequest) && count($deleteMemberRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deleteMemberRequest when calling facilityIdRosterCidDelete'
            );
        }

        $resourcePath = '/facility/{id}/roster/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($deleteMemberRequest)) {
            $_tempBody = $deleteMemberRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdRosterManageVisitorCidDelete
     *
     * Delete member from visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  string $reason Reason for deletion (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function facilityIdRosterManageVisitorCidDelete($id, $cid, $reason)
    {
        list($response) = $this->facilityIdRosterManageVisitorCidDeleteWithHttpInfo($id, $cid, $reason);
        return $response;
    }

    /**
     * Operation facilityIdRosterManageVisitorCidDeleteWithHttpInfo
     *
     * Delete member from visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  string $reason Reason for deletion (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdRosterManageVisitorCidDeleteWithHttpInfo($id, $cid, $reason)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdRosterManageVisitorCidDeleteRequest($id, $cid, $reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdRosterManageVisitorCidDeleteAsync
     *
     * Delete member from visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  string $reason Reason for deletion (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterManageVisitorCidDeleteAsync($id, $cid, $reason)
    {
        return $this->facilityIdRosterManageVisitorCidDeleteAsyncWithHttpInfo($id, $cid, $reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdRosterManageVisitorCidDeleteAsyncWithHttpInfo
     *
     * Delete member from visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  string $reason Reason for deletion (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterManageVisitorCidDeleteAsyncWithHttpInfo($id, $cid, $reason)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdRosterManageVisitorCidDeleteRequest($id, $cid, $reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdRosterManageVisitorCidDelete'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     * @param  string $reason Reason for deletion (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdRosterManageVisitorCidDeleteRequest($id, $cid, $reason)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdRosterManageVisitorCidDelete'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling facilityIdRosterManageVisitorCidDelete'
            );
        }
        // verify the required parameter 'reason' is set
        if ($reason === null || (is_array($reason) && count($reason) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reason when calling facilityIdRosterManageVisitorCidDelete'
            );
        }

        $resourcePath = '/facility/{id}/roster/manageVisitor/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($reason)) {
            $_tempBody = $reason;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdRosterManageVisitorCidPost
     *
     * Add member to visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function facilityIdRosterManageVisitorCidPost($id, $cid)
    {
        list($response) = $this->facilityIdRosterManageVisitorCidPostWithHttpInfo($id, $cid);
        return $response;
    }

    /**
     * Operation facilityIdRosterManageVisitorCidPostWithHttpInfo
     *
     * Add member to visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdRosterManageVisitorCidPostWithHttpInfo($id, $cid)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdRosterManageVisitorCidPostRequest($id, $cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdRosterManageVisitorCidPostAsync
     *
     * Add member to visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterManageVisitorCidPostAsync($id, $cid)
    {
        return $this->facilityIdRosterManageVisitorCidPostAsyncWithHttpInfo($id, $cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdRosterManageVisitorCidPostAsyncWithHttpInfo
     *
     * Add member to visiting roster. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterManageVisitorCidPostAsyncWithHttpInfo($id, $cid)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdRosterManageVisitorCidPostRequest($id, $cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdRosterManageVisitorCidPost'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $cid CID of controller (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdRosterManageVisitorCidPostRequest($id, $cid)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdRosterManageVisitorCidPost'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling facilityIdRosterManageVisitorCidPost'
            );
        }

        $resourcePath = '/facility/{id}/roster/manageVisitor/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdRosterMembershipGet
     *
     * Get facility roster.
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $membership Membership type (home, visit, both) (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\User[]
     */
    public function facilityIdRosterMembershipGet($id, $membership)
    {
        list($response) = $this->facilityIdRosterMembershipGetWithHttpInfo($id, $membership);
        return $response;
    }

    /**
     * Operation facilityIdRosterMembershipGetWithHttpInfo
     *
     * Get facility roster.
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $membership Membership type (home, visit, both) (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\User[], HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdRosterMembershipGetWithHttpInfo($id, $membership)
    {
        $returnType = '\VATUSA\Client\Model\User[]';
        $request = $this->facilityIdRosterMembershipGetRequest($id, $membership);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\User[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdRosterMembershipGetAsync
     *
     * Get facility roster.
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $membership Membership type (home, visit, both) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterMembershipGetAsync($id, $membership)
    {
        return $this->facilityIdRosterMembershipGetAsyncWithHttpInfo($id, $membership)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdRosterMembershipGetAsyncWithHttpInfo
     *
     * Get facility roster.
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $membership Membership type (home, visit, both) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdRosterMembershipGetAsyncWithHttpInfo($id, $membership)
    {
        $returnType = '\VATUSA\Client\Model\User[]';
        $request = $this->facilityIdRosterMembershipGetRequest($id, $membership);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdRosterMembershipGet'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $membership Membership type (home, visit, both) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdRosterMembershipGetRequest($id, $membership)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdRosterMembershipGet'
            );
        }
        // verify the required parameter 'membership' is set
        if ($membership === null || (is_array($membership) && count($membership) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership when calling facilityIdRosterMembershipGet'
            );
        }

        $resourcePath = '/facility/{id}/roster/{membership}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($membership !== null) {
            $resourcePath = str_replace(
                '{' . 'membership' . '}',
                ObjectSerializer::toPathValue($membership),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdTransfersGet
     *
     * Get pending transfers. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20011
     */
    public function facilityIdTransfersGet($id)
    {
        list($response) = $this->facilityIdTransfersGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation facilityIdTransfersGetWithHttpInfo
     *
     * Get pending transfers. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdTransfersGetWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20011';
        $request = $this->facilityIdTransfersGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdTransfersGetAsync
     *
     * Get pending transfers. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdTransfersGetAsync($id)
    {
        return $this->facilityIdTransfersGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdTransfersGetAsyncWithHttpInfo
     *
     * Get pending transfers. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdTransfersGetAsyncWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20011';
        $request = $this->facilityIdTransfersGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdTransfersGet'
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdTransfersGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdTransfersGet'
            );
        }

        $resourcePath = '/facility/{id}/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdTransfersTransferIdPut
     *
     * Modify transfer request.  [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $transferId Transfer ID (required)
     * @param  string $action Action to take on transfer request. Valid values:     approve,reject (required)
     * @param  string $reason Reason for transfer request rejection     [required for rejections] (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function facilityIdTransfersTransferIdPut($id, $transferId, $action, $reason = null)
    {
        list($response) = $this->facilityIdTransfersTransferIdPutWithHttpInfo($id, $transferId, $action, $reason);
        return $response;
    }

    /**
     * Operation facilityIdTransfersTransferIdPutWithHttpInfo
     *
     * Modify transfer request.  [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $transferId Transfer ID (required)
     * @param  string $action Action to take on transfer request. Valid values:     approve,reject (required)
     * @param  string $reason Reason for transfer request rejection     [required for rejections] (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdTransfersTransferIdPutWithHttpInfo($id, $transferId, $action, $reason = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdTransfersTransferIdPutRequest($id, $transferId, $action, $reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdTransfersTransferIdPutAsync
     *
     * Modify transfer request.  [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $transferId Transfer ID (required)
     * @param  string $action Action to take on transfer request. Valid values:     approve,reject (required)
     * @param  string $reason Reason for transfer request rejection     [required for rejections] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdTransfersTransferIdPutAsync($id, $transferId, $action, $reason = null)
    {
        return $this->facilityIdTransfersTransferIdPutAsyncWithHttpInfo($id, $transferId, $action, $reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdTransfersTransferIdPutAsyncWithHttpInfo
     *
     * Modify transfer request.  [Auth]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $transferId Transfer ID (required)
     * @param  string $action Action to take on transfer request. Valid values:     approve,reject (required)
     * @param  string $reason Reason for transfer request rejection     [required for rejections] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdTransfersTransferIdPutAsyncWithHttpInfo($id, $transferId, $action, $reason = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->facilityIdTransfersTransferIdPutRequest($id, $transferId, $action, $reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdTransfersTransferIdPut'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $transferId Transfer ID (required)
     * @param  string $action Action to take on transfer request. Valid values:     approve,reject (required)
     * @param  string $reason Reason for transfer request rejection     [required for rejections] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdTransfersTransferIdPutRequest($id, $transferId, $action, $reason = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdTransfersTransferIdPut'
            );
        }
        // verify the required parameter 'transferId' is set
        if ($transferId === null || (is_array($transferId) && count($transferId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transferId when calling facilityIdTransfersTransferIdPut'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling facilityIdTransfersTransferIdPut'
            );
        }

        $resourcePath = '/facility/{id}/transfers/{transferId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($transferId !== null) {
            $resourcePath = str_replace(
                '{' . 'transferId' . '}',
                ObjectSerializer::toPathValue($transferId),
                $resourcePath
            );
        }

        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($reason !== null) {
            $formParams['reason'] = ObjectSerializer::toFormValue($reason);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdUlsReturnsGet
     *
     * Get ULS return paths. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20012
     */
    public function facilityIdUlsReturnsGet($id)
    {
        list($response) = $this->facilityIdUlsReturnsGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation facilityIdUlsReturnsGetWithHttpInfo
     *
     * Get ULS return paths. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdUlsReturnsGetWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20012';
        $request = $this->facilityIdUlsReturnsGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdUlsReturnsGetAsync
     *
     * Get ULS return paths. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsGetAsync($id)
    {
        return $this->facilityIdUlsReturnsGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdUlsReturnsGetAsyncWithHttpInfo
     *
     * Get ULS return paths. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsGetAsyncWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20012';
        $request = $this->facilityIdUlsReturnsGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdUlsReturnsGet'
     *
     * @param  string $id Facility IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdUlsReturnsGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdUlsReturnsGet'
            );
        }

        $resourcePath = '/facility/{id}/ulsReturns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdUlsReturnsOrderDelete
     *
     * Remove ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20013
     */
    public function facilityIdUlsReturnsOrderDelete($id, $order)
    {
        list($response) = $this->facilityIdUlsReturnsOrderDeleteWithHttpInfo($id, $order);
        return $response;
    }

    /**
     * Operation facilityIdUlsReturnsOrderDeleteWithHttpInfo
     *
     * Remove ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdUlsReturnsOrderDeleteWithHttpInfo($id, $order)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20013';
        $request = $this->facilityIdUlsReturnsOrderDeleteRequest($id, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdUlsReturnsOrderDeleteAsync
     *
     * Remove ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsOrderDeleteAsync($id, $order)
    {
        return $this->facilityIdUlsReturnsOrderDeleteAsyncWithHttpInfo($id, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdUlsReturnsOrderDeleteAsyncWithHttpInfo
     *
     * Remove ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsOrderDeleteAsyncWithHttpInfo($id, $order)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20013';
        $request = $this->facilityIdUlsReturnsOrderDeleteRequest($id, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdUlsReturnsOrderDelete'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdUlsReturnsOrderDeleteRequest($id, $order)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdUlsReturnsOrderDelete'
            );
        }
        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling facilityIdUlsReturnsOrderDelete'
            );
        }

        $resourcePath = '/facility/{id}/ulsReturns/{order}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($order !== null) {
            $resourcePath = str_replace(
                '{' . 'order' . '}',
                ObjectSerializer::toPathValue($order),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdUlsReturnsPost
     *
     * Add ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     * @param  string $url Return URL (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20013
     */
    public function facilityIdUlsReturnsPost($id, $order, $url)
    {
        list($response) = $this->facilityIdUlsReturnsPostWithHttpInfo($id, $order, $url);
        return $response;
    }

    /**
     * Operation facilityIdUlsReturnsPostWithHttpInfo
     *
     * Add ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     * @param  string $url Return URL (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdUlsReturnsPostWithHttpInfo($id, $order, $url)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20013';
        $request = $this->facilityIdUlsReturnsPostRequest($id, $order, $url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdUlsReturnsPostAsync
     *
     * Add ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     * @param  string $url Return URL (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsPostAsync($id, $order, $url)
    {
        return $this->facilityIdUlsReturnsPostAsyncWithHttpInfo($id, $order, $url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdUlsReturnsPostAsyncWithHttpInfo
     *
     * Add ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     * @param  string $url Return URL (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsPostAsyncWithHttpInfo($id, $order, $url)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20013';
        $request = $this->facilityIdUlsReturnsPostRequest($id, $order, $url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdUlsReturnsPost'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  int $order Order number, used in ULS query (required)
     * @param  string $url Return URL (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdUlsReturnsPostRequest($id, $order, $url)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdUlsReturnsPost'
            );
        }
        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling facilityIdUlsReturnsPost'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling facilityIdUlsReturnsPost'
            );
        }

        $resourcePath = '/facility/{id}/ulsReturns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($order !== null) {
            $formParams['order'] = ObjectSerializer::toFormValue($order);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation facilityIdUlsReturnsPut
     *
     * Edit ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Return URL (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20013
     */
    public function facilityIdUlsReturnsPut($id, $url)
    {
        list($response) = $this->facilityIdUlsReturnsPutWithHttpInfo($id, $url);
        return $response;
    }

    /**
     * Operation facilityIdUlsReturnsPutWithHttpInfo
     *
     * Edit ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Return URL (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function facilityIdUlsReturnsPutWithHttpInfo($id, $url)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20013';
        $request = $this->facilityIdUlsReturnsPutRequest($id, $url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation facilityIdUlsReturnsPutAsync
     *
     * Edit ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Return URL (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsPutAsync($id, $url)
    {
        return $this->facilityIdUlsReturnsPutAsyncWithHttpInfo($id, $url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facilityIdUlsReturnsPutAsyncWithHttpInfo
     *
     * Edit ULS return path. [Key]
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Return URL (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function facilityIdUlsReturnsPutAsyncWithHttpInfo($id, $url)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20013';
        $request = $this->facilityIdUlsReturnsPutRequest($id, $url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'facilityIdUlsReturnsPut'
     *
     * @param  string $id Facility IATA ID (required)
     * @param  string $url Return URL (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function facilityIdUlsReturnsPutRequest($id, $url)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling facilityIdUlsReturnsPut'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling facilityIdUlsReturnsPut'
            );
        }

        $resourcePath = '/facility/{id}/ulsReturns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
