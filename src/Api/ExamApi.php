<?php
/**
 * ExamApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * ExamApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation examIdAssignCidDelete
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examIdAssignCidDelete($id, $cid)
    {
        list($response) = $this->examIdAssignCidDeleteWithHttpInfo($id, $cid);
        return $response;
    }

    /**
     * Operation examIdAssignCidDeleteWithHttpInfo
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examIdAssignCidDeleteWithHttpInfo($id, $cid)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidDeleteRequest($id, $cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examIdAssignCidDeleteAsync
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidDeleteAsync($id, $cid)
    {
        return $this->examIdAssignCidDeleteAsyncWithHttpInfo($id, $cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examIdAssignCidDeleteAsyncWithHttpInfo
     *
     * Delete exam assignment. [Auth]
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidDeleteAsyncWithHttpInfo($id, $cid)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidDeleteRequest($id, $cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examIdAssignCidDelete'
     *
     * @param  int $id Exam ID Number (required)
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examIdAssignCidDeleteRequest($id, $cid)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling examIdAssignCidDelete'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling examIdAssignCidDelete'
            );
        }

        $resourcePath = '/exam/{id}/assign/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examIdAssignCidPost
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examIdAssignCidPost($id, $cid, $expire = null)
    {
        list($response) = $this->examIdAssignCidPostWithHttpInfo($id, $cid, $expire);
        return $response;
    }

    /**
     * Operation examIdAssignCidPostWithHttpInfo
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examIdAssignCidPostWithHttpInfo($id, $cid, $expire = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidPostRequest($id, $cid, $expire);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examIdAssignCidPostAsync
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidPostAsync($id, $cid, $expire = null)
    {
        return $this->examIdAssignCidPostAsyncWithHttpInfo($id, $cid, $expire)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examIdAssignCidPostAsyncWithHttpInfo
     *
     * Assign exam. [Auth]
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examIdAssignCidPostAsyncWithHttpInfo($id, $cid, $expire = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examIdAssignCidPostRequest($id, $cid, $expire);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examIdAssignCidPost'
     *
     * @param  int $id Exam ID (required)
     * @param  int $cid VATSIM ID (required)
     * @param  int $expire Days until expiration, 7      *                                   default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examIdAssignCidPostRequest($id, $cid, $expire = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling examIdAssignCidPost'
            );
        }
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling examIdAssignCidPost'
            );
        }

        $resourcePath = '/exam/{id}/assign/{cid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // form params
        if ($expire !== null) {
            $formParams['expire'] = ObjectSerializer::toFormValue($expire);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examQueueExamIdPost
     *
     * Add exam to queue for the VATUSA Exam Center. [Private]
     *
     * @param  int $examId Exam ID to place in queue (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examQueueExamIdPost($examId, $bearer)
    {
        list($response) = $this->examQueueExamIdPostWithHttpInfo($examId, $bearer);
        return $response;
    }

    /**
     * Operation examQueueExamIdPostWithHttpInfo
     *
     * Add exam to queue for the VATUSA Exam Center. [Private]
     *
     * @param  int $examId Exam ID to place in queue (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examQueueExamIdPostWithHttpInfo($examId, $bearer)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examQueueExamIdPostRequest($examId, $bearer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examQueueExamIdPostAsync
     *
     * Add exam to queue for the VATUSA Exam Center. [Private]
     *
     * @param  int $examId Exam ID to place in queue (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examQueueExamIdPostAsync($examId, $bearer)
    {
        return $this->examQueueExamIdPostAsyncWithHttpInfo($examId, $bearer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examQueueExamIdPostAsyncWithHttpInfo
     *
     * Add exam to queue for the VATUSA Exam Center. [Private]
     *
     * @param  int $examId Exam ID to place in queue (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examQueueExamIdPostAsyncWithHttpInfo($examId, $bearer)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examQueueExamIdPostRequest($examId, $bearer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examQueueExamIdPost'
     *
     * @param  int $examId Exam ID to place in queue (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examQueueExamIdPostRequest($examId, $bearer)
    {
        // verify the required parameter 'examId' is set
        if ($examId === null || (is_array($examId) && count($examId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $examId when calling examQueueExamIdPost'
            );
        }
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling examQueueExamIdPost'
            );
        }

        $resourcePath = '/exam/queue/{examId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }

        // path params
        if ($examId !== null) {
            $resourcePath = str_replace(
                '{' . 'examId' . '}',
                ObjectSerializer::toPathValue($examId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examRequestGet
     *
     * Generates and sends exam payload for VATUSA Exam Center based on queued exam for JWT auth'd user.     [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2007
     */
    public function examRequestGet($bearer)
    {
        list($response) = $this->examRequestGetWithHttpInfo($bearer);
        return $response;
    }

    /**
     * Operation examRequestGetWithHttpInfo
     *
     * Generates and sends exam payload for VATUSA Exam Center based on queued exam for JWT auth'd user.     [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function examRequestGetWithHttpInfo($bearer)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2007';
        $request = $this->examRequestGetRequest($bearer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examRequestGetAsync
     *
     * Generates and sends exam payload for VATUSA Exam Center based on queued exam for JWT auth'd user.     [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examRequestGetAsync($bearer)
    {
        return $this->examRequestGetAsyncWithHttpInfo($bearer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examRequestGetAsyncWithHttpInfo
     *
     * Generates and sends exam payload for VATUSA Exam Center based on queued exam for JWT auth'd user.     [Private]
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examRequestGetAsyncWithHttpInfo($bearer)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2007';
        $request = $this->examRequestGetRequest($bearer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examRequestGet'
     *
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examRequestGetRequest($bearer)
    {
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling examRequestGet'
            );
        }

        $resourcePath = '/exam/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examSubmitPost
     *
     * Submit exam payload for grading. [Private]
     *
     * @param  string $payload Exam payload (base64) (required)
     * @param  string $answers Answers (base64) (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2006
     */
    public function examSubmitPost($payload, $answers, $bearer)
    {
        list($response) = $this->examSubmitPostWithHttpInfo($payload, $answers, $bearer);
        return $response;
    }

    /**
     * Operation examSubmitPostWithHttpInfo
     *
     * Submit exam payload for grading. [Private]
     *
     * @param  string $payload Exam payload (base64) (required)
     * @param  string $answers Answers (base64) (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function examSubmitPostWithHttpInfo($payload, $answers, $bearer)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2006';
        $request = $this->examSubmitPostRequest($payload, $answers, $bearer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examSubmitPostAsync
     *
     * Submit exam payload for grading. [Private]
     *
     * @param  string $payload Exam payload (base64) (required)
     * @param  string $answers Answers (base64) (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examSubmitPostAsync($payload, $answers, $bearer)
    {
        return $this->examSubmitPostAsyncWithHttpInfo($payload, $answers, $bearer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examSubmitPostAsyncWithHttpInfo
     *
     * Submit exam payload for grading. [Private]
     *
     * @param  string $payload Exam payload (base64) (required)
     * @param  string $answers Answers (base64) (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examSubmitPostAsyncWithHttpInfo($payload, $answers, $bearer)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2006';
        $request = $this->examSubmitPostRequest($payload, $answers, $bearer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examSubmitPost'
     *
     * @param  string $payload Exam payload (base64) (required)
     * @param  string $answers Answers (base64) (required)
     * @param  string $bearer JWT Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examSubmitPostRequest($payload, $answers, $bearer)
    {
        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling examSubmitPost'
            );
        }
        // verify the required parameter 'answers' is set
        if ($answers === null || (is_array($answers) && count($answers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $answers when calling examSubmitPost'
            );
        }
        // verify the required parameter 'bearer' is set
        if ($bearer === null || (is_array($bearer) && count($bearer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bearer when calling examSubmitPost'
            );
        }

        $resourcePath = '/exam/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($payload !== null) {
            $headerParams['payload'] = ObjectSerializer::toHeaderValue($payload);
        }
        // header params
        if ($answers !== null) {
            $headerParams['answers'] = ObjectSerializer::toHeaderValue($answers);
        }
        // header params
        if ($bearer !== null) {
            $headerParams['bearer'] = ObjectSerializer::toHeaderValue($bearer);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examsExamidGet
     *
     * Get exam details
     *
     * @param  string $examid Get exam details of      *                                   id (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Exam
     */
    public function examsExamidGet($examid)
    {
        list($response) = $this->examsExamidGetWithHttpInfo($examid);
        return $response;
    }

    /**
     * Operation examsExamidGetWithHttpInfo
     *
     * Get exam details
     *
     * @param  string $examid Get exam details of      *                                   id (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Exam, HTTP status code, HTTP response headers (array of strings)
     */
    public function examsExamidGetWithHttpInfo($examid)
    {
        $returnType = '\VATUSA\Client\Model\Exam';
        $request = $this->examsExamidGetRequest($examid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Exam',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examsExamidGetAsync
     *
     * Get exam details
     *
     * @param  string $examid Get exam details of      *                                   id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidGetAsync($examid)
    {
        return $this->examsExamidGetAsyncWithHttpInfo($examid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examsExamidGetAsyncWithHttpInfo
     *
     * Get exam details
     *
     * @param  string $examid Get exam details of      *                                   id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidGetAsyncWithHttpInfo($examid)
    {
        $returnType = '\VATUSA\Client\Model\Exam';
        $request = $this->examsExamidGetRequest($examid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examsExamidGet'
     *
     * @param  string $examid Get exam details of      *                                   id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examsExamidGetRequest($examid)
    {
        // verify the required parameter 'examid' is set
        if ($examid === null || (is_array($examid) && count($examid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $examid when calling examsExamidGet'
            );
        }

        $resourcePath = '/exams/{examid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($examid !== null) {
            $resourcePath = str_replace(
                '{' . 'examid' . '}',
                ObjectSerializer::toPathValue($examid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examsExamidPost
     *
     * Create new question. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OKID
     */
    public function examsExamidPost($facility, $examid, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        list($response) = $this->examsExamidPostWithHttpInfo($facility, $examid, $question, $type, $choice1, $choice2, $choice3, $choice4);
        return $response;
    }

    /**
     * Operation examsExamidPostWithHttpInfo
     *
     * Create new question. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OKID, HTTP status code, HTTP response headers (array of strings)
     */
    public function examsExamidPostWithHttpInfo($facility, $examid, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        $returnType = '\VATUSA\Client\Model\OKID';
        $request = $this->examsExamidPostRequest($facility, $examid, $question, $type, $choice1, $choice2, $choice3, $choice4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OKID',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examsExamidPostAsync
     *
     * Create new question. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidPostAsync($facility, $examid, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        return $this->examsExamidPostAsyncWithHttpInfo($facility, $examid, $question, $type, $choice1, $choice2, $choice3, $choice4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examsExamidPostAsyncWithHttpInfo
     *
     * Create new question. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidPostAsyncWithHttpInfo($facility, $examid, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        $returnType = '\VATUSA\Client\Model\OKID';
        $request = $this->examsExamidPostRequest($facility, $examid, $question, $type, $choice1, $choice2, $choice3, $choice4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examsExamidPost'
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examsExamidPostRequest($facility, $examid, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling examsExamidPost'
            );
        }
        // verify the required parameter 'examid' is set
        if ($examid === null || (is_array($examid) && count($examid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $examid when calling examsExamidPost'
            );
        }
        // verify the required parameter 'question' is set
        if ($question === null || (is_array($question) && count($question) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $question when calling examsExamidPost'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling examsExamidPost'
            );
        }
        // verify the required parameter 'choice1' is set
        if ($choice1 === null || (is_array($choice1) && count($choice1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice1 when calling examsExamidPost'
            );
        }

        $resourcePath = '/exams/{examid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($examid !== null) {
            $resourcePath = str_replace(
                '{' . 'examid' . '}',
                ObjectSerializer::toPathValue($examid),
                $resourcePath
            );
        }

        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($question !== null) {
            $formParams['question'] = ObjectSerializer::toFormValue($question);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($choice1 !== null) {
            $formParams['choice1'] = ObjectSerializer::toFormValue($choice1);
        }
        // form params
        if ($choice2 !== null) {
            $formParams['choice2'] = ObjectSerializer::toFormValue($choice2);
        }
        // form params
        if ($choice3 !== null) {
            $formParams['choice3'] = ObjectSerializer::toFormValue($choice3);
        }
        // form params
        if ($choice4 !== null) {
            $formParams['choice4'] = ObjectSerializer::toFormValue($choice4);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examsExamidPut
     *
     * Edit details of exam. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $name Exam name (optional)
     * @param  int $cbtRequired ID of CBT Required (optional)
     * @param  int $passingScore Passing Score Percentage *     100 (optional)
     * @param  int $retakePeriod Auto reassign on fail after     X days, 0 &#x3D; no auto reassign, valid values: 1, 3, 5, 7, 14 (optional)
     * @param  int $numberQuestions Number of questions to     ask, 0 &#x3D; all (optional)
     * @param  int $active Is exam active? (numeric     representation of bool 1 &#x3D; active, 0 &#x3D; not active) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examsExamidPut($facility, $examid, $name = null, $cbtRequired = null, $passingScore = null, $retakePeriod = null, $numberQuestions = null, $active = null)
    {
        list($response) = $this->examsExamidPutWithHttpInfo($facility, $examid, $name, $cbtRequired, $passingScore, $retakePeriod, $numberQuestions, $active);
        return $response;
    }

    /**
     * Operation examsExamidPutWithHttpInfo
     *
     * Edit details of exam. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $name Exam name (optional)
     * @param  int $cbtRequired ID of CBT Required (optional)
     * @param  int $passingScore Passing Score Percentage *     100 (optional)
     * @param  int $retakePeriod Auto reassign on fail after     X days, 0 &#x3D; no auto reassign, valid values: 1, 3, 5, 7, 14 (optional)
     * @param  int $numberQuestions Number of questions to     ask, 0 &#x3D; all (optional)
     * @param  int $active Is exam active? (numeric     representation of bool 1 &#x3D; active, 0 &#x3D; not active) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examsExamidPutWithHttpInfo($facility, $examid, $name = null, $cbtRequired = null, $passingScore = null, $retakePeriod = null, $numberQuestions = null, $active = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examsExamidPutRequest($facility, $examid, $name, $cbtRequired, $passingScore, $retakePeriod, $numberQuestions, $active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examsExamidPutAsync
     *
     * Edit details of exam. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $name Exam name (optional)
     * @param  int $cbtRequired ID of CBT Required (optional)
     * @param  int $passingScore Passing Score Percentage *     100 (optional)
     * @param  int $retakePeriod Auto reassign on fail after     X days, 0 &#x3D; no auto reassign, valid values: 1, 3, 5, 7, 14 (optional)
     * @param  int $numberQuestions Number of questions to     ask, 0 &#x3D; all (optional)
     * @param  int $active Is exam active? (numeric     representation of bool 1 &#x3D; active, 0 &#x3D; not active) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidPutAsync($facility, $examid, $name = null, $cbtRequired = null, $passingScore = null, $retakePeriod = null, $numberQuestions = null, $active = null)
    {
        return $this->examsExamidPutAsyncWithHttpInfo($facility, $examid, $name, $cbtRequired, $passingScore, $retakePeriod, $numberQuestions, $active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examsExamidPutAsyncWithHttpInfo
     *
     * Edit details of exam. [Private]
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $name Exam name (optional)
     * @param  int $cbtRequired ID of CBT Required (optional)
     * @param  int $passingScore Passing Score Percentage *     100 (optional)
     * @param  int $retakePeriod Auto reassign on fail after     X days, 0 &#x3D; no auto reassign, valid values: 1, 3, 5, 7, 14 (optional)
     * @param  int $numberQuestions Number of questions to     ask, 0 &#x3D; all (optional)
     * @param  int $active Is exam active? (numeric     representation of bool 1 &#x3D; active, 0 &#x3D; not active) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidPutAsyncWithHttpInfo($facility, $examid, $name = null, $cbtRequired = null, $passingScore = null, $retakePeriod = null, $numberQuestions = null, $active = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examsExamidPutRequest($facility, $examid, $name, $cbtRequired, $passingScore, $retakePeriod, $numberQuestions, $active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examsExamidPut'
     *
     * @param  string $facility Filter list by     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  string $name Exam name (optional)
     * @param  int $cbtRequired ID of CBT Required (optional)
     * @param  int $passingScore Passing Score Percentage *     100 (optional)
     * @param  int $retakePeriod Auto reassign on fail after     X days, 0 &#x3D; no auto reassign, valid values: 1, 3, 5, 7, 14 (optional)
     * @param  int $numberQuestions Number of questions to     ask, 0 &#x3D; all (optional)
     * @param  int $active Is exam active? (numeric     representation of bool 1 &#x3D; active, 0 &#x3D; not active) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examsExamidPutRequest($facility, $examid, $name = null, $cbtRequired = null, $passingScore = null, $retakePeriod = null, $numberQuestions = null, $active = null)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling examsExamidPut'
            );
        }
        // verify the required parameter 'examid' is set
        if ($examid === null || (is_array($examid) && count($examid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $examid when calling examsExamidPut'
            );
        }

        $resourcePath = '/exams/{examid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($examid !== null) {
            $resourcePath = str_replace(
                '{' . 'examid' . '}',
                ObjectSerializer::toPathValue($examid),
                $resourcePath
            );
        }

        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($cbtRequired !== null) {
            $formParams['cbtRequired'] = ObjectSerializer::toFormValue($cbtRequired);
        }
        // form params
        if ($passingScore !== null) {
            $formParams['passingScore'] = ObjectSerializer::toFormValue($passingScore);
        }
        // form params
        if ($retakePeriod !== null) {
            $formParams['retakePeriod'] = ObjectSerializer::toFormValue($retakePeriod);
        }
        // form params
        if ($numberQuestions !== null) {
            $formParams['numberQuestions'] = ObjectSerializer::toFormValue($numberQuestions);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examsExamidQuestionIDPut
     *
     * Edit question. [Private]
     *
     * @param  string $facility Filter list by      *                                     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  int $questionID Question ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function examsExamidQuestionIDPut($facility, $examid, $questionID, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        list($response) = $this->examsExamidQuestionIDPutWithHttpInfo($facility, $examid, $questionID, $question, $type, $choice1, $choice2, $choice3, $choice4);
        return $response;
    }

    /**
     * Operation examsExamidQuestionIDPutWithHttpInfo
     *
     * Edit question. [Private]
     *
     * @param  string $facility Filter list by      *                                     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  int $questionID Question ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function examsExamidQuestionIDPutWithHttpInfo($facility, $examid, $questionID, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examsExamidQuestionIDPutRequest($facility, $examid, $questionID, $question, $type, $choice1, $choice2, $choice3, $choice4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examsExamidQuestionIDPutAsync
     *
     * Edit question. [Private]
     *
     * @param  string $facility Filter list by      *                                     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  int $questionID Question ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidQuestionIDPutAsync($facility, $examid, $questionID, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        return $this->examsExamidQuestionIDPutAsyncWithHttpInfo($facility, $examid, $questionID, $question, $type, $choice1, $choice2, $choice3, $choice4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examsExamidQuestionIDPutAsyncWithHttpInfo
     *
     * Edit question. [Private]
     *
     * @param  string $facility Filter list by      *                                     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  int $questionID Question ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidQuestionIDPutAsyncWithHttpInfo($facility, $examid, $questionID, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->examsExamidQuestionIDPutRequest($facility, $examid, $questionID, $question, $type, $choice1, $choice2, $choice3, $choice4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examsExamidQuestionIDPut'
     *
     * @param  string $facility Filter list by      *                                     Facility IATA ID (required)
     * @param  int $examid Exam ID (required)
     * @param  int $questionID Question ID (required)
     * @param  string $question Question text (required)
     * @param  string $type Type of question     (multiple|truefalse) (required)
     * @param  string $choice1 Answer (required)
     * @param  string $choice2 Distractor #1 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice3 Distractor #2 (only for     type&#x3D;multiple) (optional)
     * @param  string $choice4 Distractor #3 (only for     type&#x3D;multiple) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examsExamidQuestionIDPutRequest($facility, $examid, $questionID, $question, $type, $choice1, $choice2 = null, $choice3 = null, $choice4 = null)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling examsExamidQuestionIDPut'
            );
        }
        // verify the required parameter 'examid' is set
        if ($examid === null || (is_array($examid) && count($examid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $examid when calling examsExamidQuestionIDPut'
            );
        }
        // verify the required parameter 'questionID' is set
        if ($questionID === null || (is_array($questionID) && count($questionID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $questionID when calling examsExamidQuestionIDPut'
            );
        }
        // verify the required parameter 'question' is set
        if ($question === null || (is_array($question) && count($question) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $question when calling examsExamidQuestionIDPut'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling examsExamidQuestionIDPut'
            );
        }
        // verify the required parameter 'choice1' is set
        if ($choice1 === null || (is_array($choice1) && count($choice1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $choice1 when calling examsExamidQuestionIDPut'
            );
        }

        $resourcePath = '/exams/{examid}/{questionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($facility !== null) {
            $queryParams['facility'] = ObjectSerializer::toQueryValue($facility);
        }

        // path params
        if ($examid !== null) {
            $resourcePath = str_replace(
                '{' . 'examid' . '}',
                ObjectSerializer::toPathValue($examid),
                $resourcePath
            );
        }
        // path params
        if ($questionID !== null) {
            $resourcePath = str_replace(
                '{' . 'questionID' . '}',
                ObjectSerializer::toPathValue($questionID),
                $resourcePath
            );
        }

        // form params
        if ($question !== null) {
            $formParams['question'] = ObjectSerializer::toFormValue($question);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($choice1 !== null) {
            $formParams['choice1'] = ObjectSerializer::toFormValue($choice1);
        }
        // form params
        if ($choice2 !== null) {
            $formParams['choice2'] = ObjectSerializer::toFormValue($choice2);
        }
        // form params
        if ($choice3 !== null) {
            $formParams['choice3'] = ObjectSerializer::toFormValue($choice3);
        }
        // form params
        if ($choice4 !== null) {
            $formParams['choice4'] = ObjectSerializer::toFormValue($choice4);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examsExamidQuestionsGet
     *
     * Generate list of questions. [Auth]
     *
     * @param  string $examid exam id (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Exam
     */
    public function examsExamidQuestionsGet($examid)
    {
        list($response) = $this->examsExamidQuestionsGetWithHttpInfo($examid);
        return $response;
    }

    /**
     * Operation examsExamidQuestionsGetWithHttpInfo
     *
     * Generate list of questions. [Auth]
     *
     * @param  string $examid exam id (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Exam, HTTP status code, HTTP response headers (array of strings)
     */
    public function examsExamidQuestionsGetWithHttpInfo($examid)
    {
        $returnType = '\VATUSA\Client\Model\Exam';
        $request = $this->examsExamidQuestionsGetRequest($examid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Exam',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examsExamidQuestionsGetAsync
     *
     * Generate list of questions. [Auth]
     *
     * @param  string $examid exam id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidQuestionsGetAsync($examid)
    {
        return $this->examsExamidQuestionsGetAsyncWithHttpInfo($examid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examsExamidQuestionsGetAsyncWithHttpInfo
     *
     * Generate list of questions. [Auth]
     *
     * @param  string $examid exam id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsExamidQuestionsGetAsyncWithHttpInfo($examid)
    {
        $returnType = '\VATUSA\Client\Model\Exam';
        $request = $this->examsExamidQuestionsGetRequest($examid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examsExamidQuestionsGet'
     *
     * @param  string $examid exam id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examsExamidQuestionsGetRequest($examid)
    {
        // verify the required parameter 'examid' is set
        if ($examid === null || (is_array($examid) && count($examid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $examid when calling examsExamidQuestionsGet'
            );
        }

        $resourcePath = '/exams/{examid}/questions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($examid !== null) {
            $resourcePath = str_replace(
                '{' . 'examid' . '}',
                ObjectSerializer::toPathValue($examid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation examsFacilityGet
     *
     * Get list of exams
     *
     * @param  string $facility (OPTIONAL) Filter list by Facility     IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\Exam[]
     */
    public function examsFacilityGet($facility)
    {
        list($response) = $this->examsFacilityGetWithHttpInfo($facility);
        return $response;
    }

    /**
     * Operation examsFacilityGetWithHttpInfo
     *
     * Get list of exams
     *
     * @param  string $facility (OPTIONAL) Filter list by Facility     IATA ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\Exam[], HTTP status code, HTTP response headers (array of strings)
     */
    public function examsFacilityGetWithHttpInfo($facility)
    {
        $returnType = '\VATUSA\Client\Model\Exam[]';
        $request = $this->examsFacilityGetRequest($facility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Exam[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation examsFacilityGetAsync
     *
     * Get list of exams
     *
     * @param  string $facility (OPTIONAL) Filter list by Facility     IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsFacilityGetAsync($facility)
    {
        return $this->examsFacilityGetAsyncWithHttpInfo($facility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation examsFacilityGetAsyncWithHttpInfo
     *
     * Get list of exams
     *
     * @param  string $facility (OPTIONAL) Filter list by Facility     IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function examsFacilityGetAsyncWithHttpInfo($facility)
    {
        $returnType = '\VATUSA\Client\Model\Exam[]';
        $request = $this->examsFacilityGetRequest($facility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'examsFacilityGet'
     *
     * @param  string $facility (OPTIONAL) Filter list by Facility     IATA ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function examsFacilityGetRequest($facility)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling examsFacilityGet'
            );
        }

        $resourcePath = '/exams/{facility}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility !== null) {
            $resourcePath = str_replace(
                '{' . 'facility' . '}',
                ObjectSerializer::toPathValue($facility),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidExamHistoryGet
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20029
     */
    public function userCidExamHistoryGet($cid)
    {
        list($response) = $this->userCidExamHistoryGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidExamHistoryGetWithHttpInfo
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidExamHistoryGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20029';
        $request = $this->userCidExamHistoryGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20029',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidExamHistoryGetAsync
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidExamHistoryGetAsync($cid)
    {
        return $this->userCidExamHistoryGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidExamHistoryGetAsyncWithHttpInfo
     *
     * Get user's exam history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidExamHistoryGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20029';
        $request = $this->userCidExamHistoryGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidExamHistoryGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidExamHistoryGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidExamHistoryGet'
            );
        }

        $resourcePath = '/user/{cid}/exam/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
