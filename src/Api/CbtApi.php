<?php
/**
 * CbtApi
 * PHP version 5
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATUSA API
 *
 * VATUSA APIv2 Documentation.             Authentication methods are: <ul>             <li> JSON Web Tokens (Translated from Laravel session)</li>             <li> Session Cookies (Client-side credentials with ULS)</li>             <li> API Keys (Issued to facilities)</li></ul>             <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>             <p>Security classification: <ul>                 <li><strong>Private:</strong> CORS Restricted (Internal)</li>                 <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>                 <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>             </ul></p>             <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a             signed package.  For more information, please see the IT section of the VATUSA forums.</p>             <p>To prevent database changes in a development environment, you can either use your API sandbox key              or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,              if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
 *
 * OpenAPI spec version: 2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATUSA\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VATUSA\Client\ApiException;
use VATUSA\Client\Configuration;
use VATUSA\Client\HeaderSelector;
use VATUSA\Client\ObjectSerializer;

/**
 * CbtApi Class Doc Comment
 *
 * @category Class
 * @package  VATUSA\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CbtApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cbtBlockIdChapterIdDelete
     *
     * Delete chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function cbtBlockIdChapterIdDelete($blockId, $chapterId)
    {
        list($response) = $this->cbtBlockIdChapterIdDeleteWithHttpInfo($blockId, $chapterId);
        return $response;
    }

    /**
     * Operation cbtBlockIdChapterIdDeleteWithHttpInfo
     *
     * Delete chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtBlockIdChapterIdDeleteWithHttpInfo($blockId, $chapterId)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtBlockIdChapterIdDeleteRequest($blockId, $chapterId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtBlockIdChapterIdDeleteAsync
     *
     * Delete chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdChapterIdDeleteAsync($blockId, $chapterId)
    {
        return $this->cbtBlockIdChapterIdDeleteAsyncWithHttpInfo($blockId, $chapterId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtBlockIdChapterIdDeleteAsyncWithHttpInfo
     *
     * Delete chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdChapterIdDeleteAsyncWithHttpInfo($blockId, $chapterId)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtBlockIdChapterIdDeleteRequest($blockId, $chapterId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtBlockIdChapterIdDelete'
     *
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtBlockIdChapterIdDeleteRequest($blockId, $chapterId)
    {
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling cbtBlockIdChapterIdDelete'
            );
        }
        // verify the required parameter 'chapterId' is set
        if ($chapterId === null || (is_array($chapterId) && count($chapterId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chapterId when calling cbtBlockIdChapterIdDelete'
            );
        }

        $resourcePath = '/cbt/{blockId}/{chapterId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }
        // path params
        if ($chapterId !== null) {
            $resourcePath = str_replace(
                '{' . 'chapterId' . '}',
                ObjectSerializer::toPathValue($chapterId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtBlockIdChapterIdPut
     *
     * Edit chapter. [Auth]
     *
     * @param  string $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $active Whether or not it is      *                                   active/public (optional)
     * @param  string $url Link to object (PDF, YouTube, or other      *                                embeddable object (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function cbtBlockIdChapterIdPut($blockId, $chapterId, $sortOrder = null, $name = null, $active = null, $url = null)
    {
        list($response) = $this->cbtBlockIdChapterIdPutWithHttpInfo($blockId, $chapterId, $sortOrder, $name, $active, $url);
        return $response;
    }

    /**
     * Operation cbtBlockIdChapterIdPutWithHttpInfo
     *
     * Edit chapter. [Auth]
     *
     * @param  string $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $active Whether or not it is      *                                   active/public (optional)
     * @param  string $url Link to object (PDF, YouTube, or other      *                                embeddable object (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtBlockIdChapterIdPutWithHttpInfo($blockId, $chapterId, $sortOrder = null, $name = null, $active = null, $url = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtBlockIdChapterIdPutRequest($blockId, $chapterId, $sortOrder, $name, $active, $url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtBlockIdChapterIdPutAsync
     *
     * Edit chapter. [Auth]
     *
     * @param  string $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $active Whether or not it is      *                                   active/public (optional)
     * @param  string $url Link to object (PDF, YouTube, or other      *                                embeddable object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdChapterIdPutAsync($blockId, $chapterId, $sortOrder = null, $name = null, $active = null, $url = null)
    {
        return $this->cbtBlockIdChapterIdPutAsyncWithHttpInfo($blockId, $chapterId, $sortOrder, $name, $active, $url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtBlockIdChapterIdPutAsyncWithHttpInfo
     *
     * Edit chapter. [Auth]
     *
     * @param  string $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $active Whether or not it is      *                                   active/public (optional)
     * @param  string $url Link to object (PDF, YouTube, or other      *                                embeddable object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdChapterIdPutAsyncWithHttpInfo($blockId, $chapterId, $sortOrder = null, $name = null, $active = null, $url = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtBlockIdChapterIdPutRequest($blockId, $chapterId, $sortOrder, $name, $active, $url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtBlockIdChapterIdPut'
     *
     * @param  string $blockId Block ID (required)
     * @param  int $chapterId Chapter ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $active Whether or not it is      *                                   active/public (optional)
     * @param  string $url Link to object (PDF, YouTube, or other      *                                embeddable object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtBlockIdChapterIdPutRequest($blockId, $chapterId, $sortOrder = null, $name = null, $active = null, $url = null)
    {
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling cbtBlockIdChapterIdPut'
            );
        }
        // verify the required parameter 'chapterId' is set
        if ($chapterId === null || (is_array($chapterId) && count($chapterId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chapterId when calling cbtBlockIdChapterIdPut'
            );
        }

        $resourcePath = '/cbt/{blockId}/{chapterId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }
        // path params
        if ($chapterId !== null) {
            $resourcePath = str_replace(
                '{' . 'chapterId' . '}',
                ObjectSerializer::toPathValue($chapterId),
                $resourcePath
            );
        }

        // form params
        if ($sortOrder !== null) {
            $formParams['sortOrder'] = ObjectSerializer::toFormValue($sortOrder);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtBlockIdGet
     *
     * Get chapters in block.
     *
     * @param  int $blockId Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2002
     */
    public function cbtBlockIdGet($blockId)
    {
        list($response) = $this->cbtBlockIdGetWithHttpInfo($blockId);
        return $response;
    }

    /**
     * Operation cbtBlockIdGetWithHttpInfo
     *
     * Get chapters in block.
     *
     * @param  int $blockId Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtBlockIdGetWithHttpInfo($blockId)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2002';
        $request = $this->cbtBlockIdGetRequest($blockId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtBlockIdGetAsync
     *
     * Get chapters in block.
     *
     * @param  int $blockId Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdGetAsync($blockId)
    {
        return $this->cbtBlockIdGetAsyncWithHttpInfo($blockId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtBlockIdGetAsyncWithHttpInfo
     *
     * Get chapters in block.
     *
     * @param  int $blockId Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdGetAsyncWithHttpInfo($blockId)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2002';
        $request = $this->cbtBlockIdGetRequest($blockId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtBlockIdGet'
     *
     * @param  int $blockId Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtBlockIdGetRequest($blockId)
    {
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling cbtBlockIdGet'
            );
        }

        $resourcePath = '/cbt/{blockId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtBlockIdPost
     *
     * Create new chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $url URL of chapter      *                                object (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function cbtBlockIdPost($blockId, $facility, $name, $url)
    {
        list($response) = $this->cbtBlockIdPostWithHttpInfo($blockId, $facility, $name, $url);
        return $response;
    }

    /**
     * Operation cbtBlockIdPostWithHttpInfo
     *
     * Create new chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $url URL of chapter      *                                object (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtBlockIdPostWithHttpInfo($blockId, $facility, $name, $url)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtBlockIdPostRequest($blockId, $facility, $name, $url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtBlockIdPostAsync
     *
     * Create new chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $url URL of chapter      *                                object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdPostAsync($blockId, $facility, $name, $url)
    {
        return $this->cbtBlockIdPostAsyncWithHttpInfo($blockId, $facility, $name, $url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtBlockIdPostAsyncWithHttpInfo
     *
     * Create new chapter. [Auth]
     *
     * @param  int $blockId Block ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $url URL of chapter      *                                object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtBlockIdPostAsyncWithHttpInfo($blockId, $facility, $name, $url)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtBlockIdPostRequest($blockId, $facility, $name, $url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtBlockIdPost'
     *
     * @param  int $blockId Block ID (required)
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $url URL of chapter      *                                object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtBlockIdPostRequest($blockId, $facility, $name, $url)
    {
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling cbtBlockIdPost'
            );
        }
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling cbtBlockIdPost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cbtBlockIdPost'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling cbtBlockIdPost'
            );
        }

        $resourcePath = '/cbt/{blockId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }

        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtGet
     *
     * Get blocks filtered by facility.
     *
     * @param  string $facility Filter by facility id (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse2001
     */
    public function cbtGet($facility = null)
    {
        list($response) = $this->cbtGetWithHttpInfo($facility);
        return $response;
    }

    /**
     * Operation cbtGetWithHttpInfo
     *
     * Get blocks filtered by facility.
     *
     * @param  string $facility Filter by facility id (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtGetWithHttpInfo($facility = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2001';
        $request = $this->cbtGetRequest($facility);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtGetAsync
     *
     * Get blocks filtered by facility.
     *
     * @param  string $facility Filter by facility id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtGetAsync($facility = null)
    {
        return $this->cbtGetAsyncWithHttpInfo($facility)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtGetAsyncWithHttpInfo
     *
     * Get blocks filtered by facility.
     *
     * @param  string $facility Filter by facility id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtGetAsyncWithHttpInfo($facility = null)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse2001';
        $request = $this->cbtGetRequest($facility);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtGet'
     *
     * @param  string $facility Filter by facility id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtGetRequest($facility = null)
    {

        $resourcePath = '/cbt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($facility !== null) {
            $queryParams['facility'] = ObjectSerializer::toQueryValue($facility);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtIdDelete
     *
     * Delete block. [Auth]
     *
     * @param  int $id Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function cbtIdDelete($id)
    {
        list($response) = $this->cbtIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation cbtIdDeleteWithHttpInfo
     *
     * Delete block. [Auth]
     *
     * @param  int $id Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtIdDeleteWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtIdDeleteAsync
     *
     * Delete block. [Auth]
     *
     * @param  int $id Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtIdDeleteAsync($id)
    {
        return $this->cbtIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtIdDeleteAsyncWithHttpInfo
     *
     * Delete block. [Auth]
     *
     * @param  int $id Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtIdDelete'
     *
     * @param  int $id Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cbtIdDelete'
            );
        }

        $resourcePath = '/cbt/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtIdPut
     *
     * Edit block. [Auth]
     *
     * @param  int $id Block ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $visible Whether or not it is      *                                    active/public (optional)
     * @param  string $level Access level (plain text options:      *                                  All, S1, C1, I1, Staff, Senior Staff) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function cbtIdPut($id, $sortOrder = null, $name = null, $visible = null, $level = null)
    {
        list($response) = $this->cbtIdPutWithHttpInfo($id, $sortOrder, $name, $visible, $level);
        return $response;
    }

    /**
     * Operation cbtIdPutWithHttpInfo
     *
     * Edit block. [Auth]
     *
     * @param  int $id Block ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $visible Whether or not it is      *                                    active/public (optional)
     * @param  string $level Access level (plain text options:      *                                  All, S1, C1, I1, Staff, Senior Staff) (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtIdPutWithHttpInfo($id, $sortOrder = null, $name = null, $visible = null, $level = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtIdPutRequest($id, $sortOrder, $name, $visible, $level);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtIdPutAsync
     *
     * Edit block. [Auth]
     *
     * @param  int $id Block ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $visible Whether or not it is      *                                    active/public (optional)
     * @param  string $level Access level (plain text options:      *                                  All, S1, C1, I1, Staff, Senior Staff) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtIdPutAsync($id, $sortOrder = null, $name = null, $visible = null, $level = null)
    {
        return $this->cbtIdPutAsyncWithHttpInfo($id, $sortOrder, $name, $visible, $level)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtIdPutAsyncWithHttpInfo
     *
     * Edit block. [Auth]
     *
     * @param  int $id Block ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $visible Whether or not it is      *                                    active/public (optional)
     * @param  string $level Access level (plain text options:      *                                  All, S1, C1, I1, Staff, Senior Staff) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtIdPutAsyncWithHttpInfo($id, $sortOrder = null, $name = null, $visible = null, $level = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtIdPutRequest($id, $sortOrder, $name, $visible, $level);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtIdPut'
     *
     * @param  int $id Block ID (required)
     * @param  int $sortOrder Order location, sort lowest to      *                                      highest (optional)
     * @param  string $name Name of block (optional)
     * @param  bool $visible Whether or not it is      *                                    active/public (optional)
     * @param  string $level Access level (plain text options:      *                                  All, S1, C1, I1, Staff, Senior Staff) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtIdPutRequest($id, $sortOrder = null, $name = null, $visible = null, $level = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cbtIdPut'
            );
        }

        $resourcePath = '/cbt/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($sortOrder !== null) {
            $formParams['sortOrder'] = ObjectSerializer::toFormValue($sortOrder);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($visible !== null) {
            $formParams['visible'] = ObjectSerializer::toFormValue($visible);
        }
        // form params
        if ($level !== null) {
            $formParams['level'] = ObjectSerializer::toFormValue($level);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cbtPost
     *
     * Create new block. [Auth]
     *
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $level Rating level - ALL,      *                                  S1, C1, I1, Staff, Senior Staff (optional)
     * @param  bool $visible Block is      *                                    visible (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function cbtPost($facility, $name, $level = null, $visible = null)
    {
        list($response) = $this->cbtPostWithHttpInfo($facility, $name, $level, $visible);
        return $response;
    }

    /**
     * Operation cbtPostWithHttpInfo
     *
     * Create new block. [Auth]
     *
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $level Rating level - ALL,      *                                  S1, C1, I1, Staff, Senior Staff (optional)
     * @param  bool $visible Block is      *                                    visible (optional)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function cbtPostWithHttpInfo($facility, $name, $level = null, $visible = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtPostRequest($facility, $name, $level, $visible);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cbtPostAsync
     *
     * Create new block. [Auth]
     *
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $level Rating level - ALL,      *                                  S1, C1, I1, Staff, Senior Staff (optional)
     * @param  bool $visible Block is      *                                    visible (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtPostAsync($facility, $name, $level = null, $visible = null)
    {
        return $this->cbtPostAsyncWithHttpInfo($facility, $name, $level, $visible)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cbtPostAsyncWithHttpInfo
     *
     * Create new block. [Auth]
     *
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $level Rating level - ALL,      *                                  S1, C1, I1, Staff, Senior Staff (optional)
     * @param  bool $visible Block is      *                                    visible (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cbtPostAsyncWithHttpInfo($facility, $name, $level = null, $visible = null)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->cbtPostRequest($facility, $name, $level, $visible);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cbtPost'
     *
     * @param  string $facility Facility IATA      *                                     ID (required)
     * @param  string $name Name of block (required)
     * @param  string $level Rating level - ALL,      *                                  S1, C1, I1, Staff, Senior Staff (optional)
     * @param  bool $visible Block is      *                                    visible (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cbtPostRequest($facility, $name, $level = null, $visible = null)
    {
        // verify the required parameter 'facility' is set
        if ($facility === null || (is_array($facility) && count($facility) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility when calling cbtPost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling cbtPost'
            );
        }

        $resourcePath = '/cbt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($facility !== null) {
            $formParams['facility'] = ObjectSerializer::toFormValue($facility);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($level !== null) {
            $formParams['level'] = ObjectSerializer::toFormValue($level);
        }
        // form params
        if ($visible !== null) {
            $formParams['visible'] = ObjectSerializer::toFormValue($visible);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidCbtHistoryGet
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\TrainingProgress[]
     */
    public function userCidCbtHistoryGet($cid)
    {
        list($response) = $this->userCidCbtHistoryGetWithHttpInfo($cid);
        return $response;
    }

    /**
     * Operation userCidCbtHistoryGetWithHttpInfo
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\TrainingProgress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidCbtHistoryGetWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\TrainingProgress[]';
        $request = $this->userCidCbtHistoryGetRequest($cid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\TrainingProgress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidCbtHistoryGetAsync
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtHistoryGetAsync($cid)
    {
        return $this->userCidCbtHistoryGetAsyncWithHttpInfo($cid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidCbtHistoryGetAsyncWithHttpInfo
     *
     * Get user's CBT history. [Key]
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtHistoryGetAsyncWithHttpInfo($cid)
    {
        $returnType = '\VATUSA\Client\Model\TrainingProgress[]';
        $request = $this->userCidCbtHistoryGetRequest($cid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidCbtHistoryGet'
     *
     * @param  int $cid CERT ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidCbtHistoryGetRequest($cid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidCbtHistoryGet'
            );
        }

        $resourcePath = '/user/{cid}/cbt/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPut
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\OK
     */
    public function userCidCbtProgressBlockIdChapterIdPut($cid, $blockId, $chapterId)
    {
        list($response) = $this->userCidCbtProgressBlockIdChapterIdPutWithHttpInfo($cid, $blockId, $chapterId);
        return $response;
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPutWithHttpInfo
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\OK, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidCbtProgressBlockIdChapterIdPutWithHttpInfo($cid, $blockId, $chapterId)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidCbtProgressBlockIdChapterIdPutRequest($cid, $blockId, $chapterId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\OK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPutAsync
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdChapterIdPutAsync($cid, $blockId, $chapterId)
    {
        return $this->userCidCbtProgressBlockIdChapterIdPutAsyncWithHttpInfo($cid, $blockId, $chapterId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidCbtProgressBlockIdChapterIdPutAsyncWithHttpInfo
     *
     * Update user's CBT progress. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdChapterIdPutAsyncWithHttpInfo($cid, $blockId, $chapterId)
    {
        $returnType = '\VATUSA\Client\Model\OK';
        $request = $this->userCidCbtProgressBlockIdChapterIdPutRequest($cid, $blockId, $chapterId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidCbtProgressBlockIdChapterIdPut'
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Block ID (required)
     * @param  int $chapterId Mark progress of specific Chapter     ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidCbtProgressBlockIdChapterIdPutRequest($cid, $blockId, $chapterId)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidCbtProgressBlockIdChapterIdPut'
            );
        }
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling userCidCbtProgressBlockIdChapterIdPut'
            );
        }
        // verify the required parameter 'chapterId' is set
        if ($chapterId === null || (is_array($chapterId) && count($chapterId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chapterId when calling userCidCbtProgressBlockIdChapterIdPut'
            );
        }

        $resourcePath = '/user/{cid}/cbt/progress/{blockId}/{chapterId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }
        // path params
        if ($chapterId !== null) {
            $resourcePath = str_replace(
                '{' . 'chapterId' . '}',
                ObjectSerializer::toPathValue($chapterId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCidCbtProgressBlockIdGet
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VATUSA\Client\Model\InlineResponse20028[]
     */
    public function userCidCbtProgressBlockIdGet($cid, $blockId)
    {
        list($response) = $this->userCidCbtProgressBlockIdGetWithHttpInfo($cid, $blockId);
        return $response;
    }

    /**
     * Operation userCidCbtProgressBlockIdGetWithHttpInfo
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \VATUSA\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VATUSA\Client\Model\InlineResponse20028[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userCidCbtProgressBlockIdGetWithHttpInfo($cid, $blockId)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20028[]';
        $request = $this->userCidCbtProgressBlockIdGetRequest($cid, $blockId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\InlineResponse20028[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VATUSA\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCidCbtProgressBlockIdGetAsync
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdGetAsync($cid, $blockId)
    {
        return $this->userCidCbtProgressBlockIdGetAsyncWithHttpInfo($cid, $blockId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCidCbtProgressBlockIdGetAsyncWithHttpInfo
     *
     * Get user's CBT history for block ID. [Key]
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCidCbtProgressBlockIdGetAsyncWithHttpInfo($cid, $blockId)
    {
        $returnType = '\VATUSA\Client\Model\InlineResponse20028[]';
        $request = $this->userCidCbtProgressBlockIdGetRequest($cid, $blockId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCidCbtProgressBlockIdGet'
     *
     * @param  int $cid CERT ID (required)
     * @param  int $blockId Get progress of specific Block ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCidCbtProgressBlockIdGetRequest($cid, $blockId)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null || (is_array($cid) && count($cid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cid when calling userCidCbtProgressBlockIdGet'
            );
        }
        // verify the required parameter 'blockId' is set
        if ($blockId === null || (is_array($blockId) && count($blockId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockId when calling userCidCbtProgressBlockIdGet'
            );
        }

        $resourcePath = '/user/{cid}/cbt/progress/{blockId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{' . 'cid' . '}',
                ObjectSerializer::toPathValue($cid),
                $resourcePath
            );
        }
        // path params
        if ($blockId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockId' . '}',
                ObjectSerializer::toPathValue($blockId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
